<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清风轩</title>
  <subtitle>清风轩居 - 引仙阁</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xovel.cn/"/>
  <updated>2017-09-11T17:35:47.586Z</updated>
  <id>http://xovel.cn/</id>
  
  <author>
    <name>xovel</name>
    <email>xovel@vip.qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>URLSearchParams 简介</title>
    <link href="http://xovel.cn/article/url-search-params.html"/>
    <id>http://xovel.cn/article/url-search-params.html</id>
    <published>2017-09-11T23:52:10.000Z</published>
    <updated>2017-09-11T17:35:47.586Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文根据 <code>URLSearchParams</code> 的<a href="https://url.spec.whatwg.org/#urlsearchparams" target="_blank" rel="external">官方规范文档</a>和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams" target="_blank" rel="external">MDN 文档</a>整理而成。</p>
</blockquote>
<p>URLSearchParams 是一个 WEB 接口，它定义了一些方法来处理 URL 的查询字符串。</p>
<p>构造函数 <code>URLSearchParams()</code> 返回一个 URLSearchParams 对象，这个对象没有特别的属性，也不继承任何方法。</p>
<p>URLSearchParams 的构造实例的方法如下：</p>
<h3 id="append"><a href="#append" class="headerlink" title="append"></a><code>append</code></h3><p>插入一个新的搜索参数。该方法接受两个参数，无返回值，调用形式为 <code>URLSearchParams.append(name, value)</code>，<code>name</code> 为插入搜索参数的键名，<code>value</code> 为对应的值。</p>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a><code>delete</code></h3><p>删除指定名称的<strong>所有</strong>搜索参数。接受一个参数 <code>name</code> 即要删除的键值名称，无返回值。</p>
<h3 id="entries"><a href="#entries" class="headerlink" title="entries"></a><code>entries</code></h3><p><strong>不同于</strong> <code>Object.entries</code>，这里的 <code>entries</code> 方法会返回一个 <code>iterator</code>，可以遍历所有键值对的对象。每一个键值对均为 <code>USVString</code> 对象。</p>
<blockquote>
<ul>
<li>iterator 是迭代协议 Iterator 对象的实例。</li><li><code>entries</code> 方法通常在 <code>Web Workers</code> 中使用。</li><li><code>USVString</code> 为 unicode 标量值（unicode scalar values）。</li></ul>
</blockquote>
<p>代码示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a test URLSearchParams object</span></div><div class="line"><span class="keyword">var</span> searchParams = <span class="keyword">new</span> URLSearchParams(<span class="string">"key1=value1&amp;key2=value2"</span>);</div><div class="line"></div><div class="line"><span class="comment">// Display the key/value pairs</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> pair <span class="keyword">of</span> searchParams.entries()) &#123;</div><div class="line">   <span class="built_in">console</span>.log(pair[<span class="number">0</span>]+ <span class="string">', '</span>+ pair[<span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a><code>get</code></h3><p>获取指定搜索参数的第一个值。</p>
<h3 id="getAll"><a href="#getAll" class="headerlink" title="getAll"></a><code>getAll</code></h3><p>获取指定搜索参数的所有值。返回一个数组。</p>
<h3 id="has"><a href="#has" class="headerlink" title="has"></a><code>has</code></h3><p>判断是否存在指定的搜索参数。</p>
<h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a><code>keys</code></h3><p>返回 iterator 对象，包含了键/值对的所有键名。其他说明与上面的 <code>entries</code> 一样。</p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h3><p>设置指定搜索参数对应的值。接受的参数跟 <code>append</code> 中的一样，如果存在多个搜索参数对应的值，则删除其他所有值。</p>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a><code>sort</code></h3><p>按键名排序。排序规则为按键名的 <code>unicode</code> 码点，该规则是稳定排序，对相等的键值的相对顺序不做变更。</p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a><code>toString</code></h3><p>返回一个字符串，由所有搜索参数组成的字符串，可以直接用在 URL 上。</p>
<h3 id="values"><a href="#values" class="headerlink" title="values"></a><code>values</code></h3><p>返回 iterator 对象，包含了键/值对的所有值。其他说明与上面的 <code>entries</code> 和 <code>keys</code> 一样。</p>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a><code>forEach</code></h3><p>扩展方法，提供接近于数组 forEach 的遍历方式，<del>但它并不是一个数组，也不是一个类数组</del>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">searchParams.forEach(<span class="function">(<span class="params">...args</span>)=&gt;</span><span class="built_in">console</span>.log(args))</div></pre></td></tr></table></figure>
<blockquote>
<p>上面的代码中，<code>args</code> 依次为键名、值、对应的 searchParam。</p>
</blockquote>
<p><em>参考资料</em>：</p>
<ul>
<li><a href="https://url.spec.whatwg.org/#urlsearchparams" target="_blank" rel="external">URL Standard</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams" target="_blank" rel="external">URLSearchParams - Web APIs | MDN</a></li><li><a href="https://nodejs.org/api/url.html#url_class_urlsearchparams" target="_blank" rel="external">URL | Node.js v8.4.0 Documentation</a></li><li><a href="http://caniuse.com/#feat=urlsearchparams" target="_blank" rel="external">Can I use - Feature: URLSearchParams</a></li></ul>
]]></content>
    
    <summary type="html">
    
      本文简单介绍一下 URLSearchParams。
    
    </summary>
    
      <category term="开发" scheme="http://xovel.cn/categories/dev/"/>
    
      <category term="文档" scheme="http://xovel.cn/categories/dev/docs/"/>
    
    
      <category term="web" scheme="http://xovel.cn/tags/web/"/>
    
      <category term="URLSearchParams" scheme="http://xovel.cn/tags/URLSearchParams/"/>
    
  </entry>
  
  <entry>
    <title>十个教育家</title>
    <link href="http://xovel.cn/article/10-educationists.html"/>
    <id>http://xovel.cn/article/10-educationists.html</id>
    <published>2017-08-27T17:24:44.000Z</published>
    <updated>2017-09-12T23:40:56.436Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍十个古今中外的教育家。</p>
<a id="more"></a>
<blockquote>
<p>原本没有想要做这样一篇文章，但是契机到了，一方面是因为自己最近从事的工作是教育方面的，对于一些教育方面的认知不够；另一个方面的原因是自己在意的一些人和事近期的动态都在表明，是时候好好了解一下古今中外相关教育界的代表人物了。</p>
</blockquote>
<p>那么，我们就开始吧。</p>
<h3 id="孔子"><a href="#孔子" class="headerlink" title="孔子"></a>孔子</h3><p>作为有着 <code>至圣</code> 之称的儒家学派创始人，孔子在每一个中国人心中的印象都不可磨灭，我们从丫丫学语开始就在接触着孔子的教诲。</p>
<p>孔子在教育界领域也是鼎鼎大名，这主要体现在下面四个方面：</p>
<ol>
<li>《论语》。由孔子弟子及后人编纂的这一部《论语》是四书五经中的代表，是孔子与其子弟对话的浓缩精炼。诸多脍炙人口的名句至今读来仍然是掷地有声，发生深省。</li><li>“有教无类”、“不愤不启不悱不发”、“学而不思则罔，思而不学则殆”的教育思想。</li><li>在教学原则方面崇尚启发性教学和因材施教。</li><li>探索出典型的教学过程：学 - 思 - 行。</li></ol>
<p>孔子对教育的认知在当时是极为先明的，其创立的儒学思想对中国和世界都有着深远的影响。</p>
<h3 id="孟子"><a href="#孟子" class="headerlink" title="孟子"></a>孟子</h3><p>“亚圣”孟轲，中国另一位伟大的思想家、教育家，儒家学派代表人物，与孔子并称“孔孟”。</p>
<p>在《孟子·尽心上》，“教育”一词被最早提及。推崇的教育理念是内发论，认为教育的目的与 17 世纪提出的“个人本位论”如出一辙。</p>
<blockquote>
<p>内发论，强调人的身心发展的力量主要源于人自身的内在需要，身心发展的顺序是由身心成熟机制决定的。</p>
<p>个人本位论，主张以个人为本位，根据个人发展的需要确定教育目的和进行教育的一种理论。</p>
</blockquote>
<p>孟子认为人性本善，万物皆备于我心，是仁义礼智四性的根源，人只要善于修身养性，向内寻求，这些品质就能得到发展。</p>
<p>孟子学派崇尚的教学过程总结起来是：博学之、审问之、明辨之、慎思之、笃行之。</p>
<h3 id="朱熹"><a href="#朱熹" class="headerlink" title="朱熹"></a>朱熹</h3><p>程朱理学代表人物，南宋著名的理学家、思想家、哲学家、教育家、诗人，有“朱子”之称。朱熹的理学思想对元、明、清三朝影响很大，成为三朝的官方哲学，是中国教育史上继孔子后的又一人。</p>
<p>朱熹是最早使用“课程”这个词语的人，有“宽着期限，紧着课程”的理念。朱熹长期从事讲学活动，《四书集注》为其精心编撰的教材，该书也被明清两代列为科举考试的内容。</p>
<p>朱熹认为 8~15 岁为小学教育阶段，主要任务是培养“圣贤坯璞”；15 岁以后为大学教育，其任务是在“坯璞”的基础上再加“光饰”，把他们培养成国家所需要的人才。这种见解为中国古代教育思想增添了一些光鲜。</p>
<h3 id="苏格拉底"><a href="#苏格拉底" class="headerlink" title="苏格拉底"></a>苏格拉底</h3><p>苏格拉底是古希腊著名的思想家、哲学家、教学家、公民陪审员，与其学生柏拉图，以及柏拉图的学生亚里士多德并称“古希腊三贤”，是公认的西方哲学的奠基者。</p>
<p>在教学方法上，苏格拉底总结出了一套独特的方法，人们称之为“苏格拉底方法”，但他本人则称之为“产婆术”（一作助产术）。苏格拉底把教师比喻为“知识的产婆”，这一教育理论是西方最早的启发式教育，本文上面提到的孔子则是中国最早提出启发式教育的教育家（不愤不启，不悱不发）。</p>
<p>苏格拉底方法是以师生问答的形式进行，所有又称之为“问答法”。教师在教学生获得某种概念时，不是直接把这种概念告诉学生，而是先向学生提问，让学生回答；如果学生回答错了，不进行纠正而是提出另外的问题引导学生思考，从而一步一步得出正确的结论，这为启发式教育奠定了基础。直到今天，问答法仍然是一种重要的教学方法。</p>
<h3 id="柏拉图"><a href="#柏拉图" class="headerlink" title="柏拉图"></a>柏拉图</h3><p>柏拉图是古希腊伟大的哲学家、教育家，西方客观唯心主义哲学的创始人，是苏格拉底的学生，其创造的柏拉图思想、柏拉图主义、柏拉图式爱情对后世影响深远。</p>
<p>柏拉图是西方教育史上第一个提出完整的学前教育思想并建立了完整的教育体系的人。</p>
<p>柏拉图主张唯心教学，认为人的一切知识都是由天赋而来，教学的目的是为了恢复人的固有知识，教学过程即是回忆理念的过程。柏拉图反对强制灌输知识，提倡通过问答形式，提出问题揭露矛盾，然后进行分析、归纳、综合、判断，最后得出结论。</p>
<p>《理想国》（一作《共和国》）是柏拉图重要的对话体著作，包括哲学、伦理、教育、文艺、政治等内容。在这本对话录中，柏拉图以苏格拉底之口通过与其他人对话的方式设计了一个真善美相统一的政体，即可以达到公正的理想国。</p>
<h3 id="昆体良"><a href="#昆体良" class="headerlink" title="昆体良"></a>昆体良</h3><p>古罗马时期著名的律师、教育家，是教育史上发展和完善教育方法和思想的先驱。</p>
<p>昆体良主张对儿童的教育应是鼓励的，能激发他们的兴趣，并认为教学质量的关键在于教师，重视学生记忆能力的培养，提倡因材施教。</p>
<p>昆体良的教育理论和实践都以培养雄辩家为宗旨。在他退休后，著述了《雄辩术原理》（即《论演说家的教育》），这部著作是他自己约二十年教育工作的经验总结，是古希腊、古罗马教育经验的集大成者，也是西方最早的教学方法论著。</p>
<h3 id="夸美纽斯"><a href="#夸美纽斯" class="headerlink" title="夸美纽斯"></a>夸美纽斯</h3><p>17 世纪捷克伟大的民主主义教育家，西方近代教育理论的奠基者，被称为“近代教育之父”。</p>
<p>夸美纽斯受到人文主义的深刻影响，主张通过教育使人获得和谐发展，并通过教育改良社会，实现教派和民族的平等。夸美纽斯是最早的公共教育的拥护者，这中理念在其著作《大教学论》中有提出，该书也是近代第一本系统的教育学著作。</p>
<p>夸美纽斯在教育史上的另一个重要的贡献是最早从理论上详细阐述了班级授课制以及相关的学年制、学日制、考查、考试制度，是最早提出“班主任”概念的教育家。</p>
<p>夸美纽斯主张义务教育和泛智教育，“把一切知识教给一切人”，在当时的历史条件下，打破了封建主义的禁锢，加速了社会的发展。</p>
<p>夸美纽斯还提出了许多教育原则，如直观性原则、启发诱导原则、量力性原则、循序渐进原则、巩固性原则、因材施教原则等等。</p>
<h3 id="赫尔巴特"><a href="#赫尔巴特" class="headerlink" title="赫尔巴特"></a>赫尔巴特</h3><p>19 世纪德国哲学家、心理学家、教育家，是科学教育学的奠基人，“教育科学之父”。</p>
<p>反映其教育思想的代表作《普通教育学》是公认的第一部具有科学体系的教育学著作，这本书也使得教育学开始成为一门独立的科学。</p>
<p>赫尔巴特明确提出教育学的科学性问题，“教育学作为一种科学，是以实践哲学和心理学为基础的。前者说明教育的目的，后者说明教育的途径、手段与障碍。”</p>
<p>赫尔巴特主张的教育原则为教学的教育性，明确指出“不存在‘无教学的教育’这个概念，正如发过来，我不承认有任何‘无教育的教学’”，“德育问题是不能同整个教育分离开来的，而是同其他教育问题必然地、广泛深远地联系在一起的”，这极大的推进了教育理论的发展。</p>
<p>赫尔巴特将教学过程分为四个阶段：清楚、联想、系统、方法。</p>
<h3 id="杜威"><a href="#杜威" class="headerlink" title="杜威"></a>杜威</h3><p>美国哲学家、教育家，实用主义的集大成者。</p>
<p>杜威从实用主义经验论和机能心理学出发，批判了传统的学校教育，并就教育本质提出了“教育即生活”和“学校即社会”的观点。杜威认为，教育过程在它的自身意外无目的，教育的目的就在教育的过程之中。</p>
<p>教学论方面，杜威提倡“从做中学”。从“思维五步”出发，杜威认为教学过程也相应的分为五步：</p>
<ul>
<li>教师给儿童提供一个与社会生活经验相关联的情境；</li><li>使儿童有准备去应付在情境中产生的问题；</li><li>使儿童产生对解决问题的思考和假设；</li><li>儿童自己对解决问题的假设加以整理和排列；</li><li>儿童通过应用来校验这些假设。</li></ul>
<blockquote>
<p>思维五步：疑难的情境、确定疑难所在、提出解决疑难的各种假设、对这些假设进行推断、验证或者修改假设。</p>
</blockquote>
<h3 id="舒尔茨"><a href="#舒尔茨" class="headerlink" title="舒尔茨"></a>舒尔茨</h3><p>首先，这个人更多的身份应该是经济学家。当然，他并不是星巴克的创始人，他是获得 1979 年诺贝尔经济学奖的一位经济哲学家西奥多·舒尔茨。</p>
<p>西奥多·舒尔茨提出的“人力资本理论”对当代教育影响很深，并在美国第 73 届经济学年会上的演讲“人力资本投资”中证明了教育对经济发展的巨大贡献。</p>
<p>舒尔茨的人力资本理论主要观点有两个：<strong>人力资本的积累是社会经济增长的源泉</strong>和<strong>教育也是使个人收入的社会分配趋于平等的因素</strong>。</p>
<p>舒尔茨论述到教育对个人收入的影响：</p>
<ul>
<li>工资的差别主要是由所受的教育的差别引起的，教育可以提高收入的能力。</li><li>教育水平的提高会使因教育不同而产生的相对收入差别趋于减缓。</li><li>人力资本投资的增加还可以使物力资本投资和财产收入趋于下降。</li></ul>
<hr>
<p>行文到此，本文就算是完结了，没有什么要特别进行说明的。嗯，就是这样。这十个名单我也忘记了从哪里看到的了。看到的时候做了一个记录，但是上面的资料很<del>简陋</del>，我重新查阅了网络上的一些资料，并进行一番整理，于是就有了这一篇文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍十个古今中外的教育家。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://xovel.cn/categories/essay/"/>
    
    
      <category term="教育" scheme="http://xovel.cn/tags/%E6%95%99%E8%82%B2/"/>
    
      <category term="教育家" scheme="http://xovel.cn/tags/%E6%95%99%E8%82%B2%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 2017 新特性一览</title>
    <link href="http://xovel.cn/article/es8.html"/>
    <id>http://xovel.cn/article/es8.html</id>
    <published>2017-07-21T04:41:27.000Z</published>
    <updated>2017-07-21T15:00:06.602Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要参考自 <code>2ality</code> 的文章：<a href="http://2ality.com/2016/02/ecmascript-2017.html" target="_blank" rel="external">ECMAScript 2017 (ES8): the final feature set</a>。部分章节会有修改，加入自己的一些理解与观点。<em>阅读本文需要有一定的 ES 基础</em>。</p>
<p>官方公告：<a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="external">Standard ECMA-262</a>。</p>
</blockquote>
<h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><p>ES6 发布的时候，引入了 <code>Promise</code> 来处理异步操作，一个常见的 Async 函数如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchJson</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> fetch(url)</div><div class="line">  .then(<span class="function"><span class="params">request</span> =&gt;</span> request.text())</div><div class="line">  .then(<span class="function"><span class="params">text</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(text);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`ERROR: <span class="subst">$&#123;error.stack&#125;</span>`</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">fetchJson(<span class="string">'http://example.com/some_file.json'</span>)</div><div class="line">.then(<span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj));</div></pre></td></tr></table></figure>
<p>现在，使用 ES2017 中新增的关键字 <code>async</code> 和 <code>await</code>，我们可以实现以看起来像是同步的代码来处理异步的操作。如上面的代码可以写成：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">  <span class="keyword">let</span> request = <span class="keyword">await</span> fetch(url);</div><div class="line">  <span class="keyword">let</span> text = <span class="keyword">await</span> request.text();</div><div class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(text);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (err) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Error: <span class="subst">$&#123;err.stack&#125;</span>`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>异步函数还有一些变体，罗列如下：</p>
<ul>
<li>异步函数声明：<code>async function foo() {}</code></li><li>异步函数表达式：<code>const foo = async function () {};</code></li><li>异步方法定义：<code>let obj = {async foo () {}};</code></li><li>异步箭头函数：<code>const foo = async () =&gt; {};</code></li></ul>
<p>更多资料可参阅：<a href="https://github.com/tc39/ecmascript-asyncawait" target="_blank" rel="external">tc39/ecmascript-asyncawait: Async/await for ECMAScript</a>，<a href="http://exploringjs.com/es6/ch_generators.html#sec_co-library" target="_blank" rel="external">Simplifying asynchronous computations via generators (section in “Exploring ES6”)</a></p>
<h3 id="共享内存和原子"><a href="#共享内存和原子" class="headerlink" title="共享内存和原子"></a>共享内存和原子</h3><p>共享内存 <code>shared memory</code> 主要是处理并行事件对于资源调用的一种机制。</p>
<p>该功能引入一个新的低级别 <code>Atomics</code> 命名空间对象和一个 <code>Shared Array Buffer</code> 构造函数来作为高级别并发抽象的原始构建块。这样可以使得开发人员可以使用多个 <code>service worker</code> 和核心线程之间的 <code>Shared Array Buffer</code> 对象的数据。通过这种方式，可以更轻松的在 <code>worker</code> 之间进行数据共享，改善它们之间的协调性。</p>
<ul>
<li><a href="https://github.com/tc39/ecmascript_sharedmem" target="_blank" rel="external">tc39/ecmascript_sharedmem: Shared memory and atomics for ECMAscript</a></li><li><a href="http://2ality.com/2017/01/shared-array-buffer.html" target="_blank" rel="external">ES proposal: Shared memory and atomics</a></li></ul>
<h2 id="次要更新"><a href="#次要更新" class="headerlink" title="次要更新"></a>次要更新</h2><h3 id="Object-values-Object-entries"><a href="#Object-values-Object-entries" class="headerlink" title="Object.values/Object.entries"></a>Object.values/Object.entries</h3><p>对象为键值对的数据结构时，每一个键值对都是一个 <code>entry</code>。<code>Object.entries</code> 提供将对象转换为其可枚举的每一个对象的集合的方法。而 <code>Object.values</code> 提取出对象中可枚举的字符串键值属性的所有值。</p>
<p><code>Object.values</code> 跟 <code>Object.keys</code> 功能类似。</p>
<p>举个例子，有一个这样的对象：<code>foo = {a: 1, b: 2, c: 3};</code>，上面提到的三个方法的结果分别为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt; foo = &#123;a:1,b:2,c:3&#125;</div><div class="line">&lt; Object &#123;a: 1, b: 2, c: 3&#125;</div><div class="line">&gt; Object.values(foo)</div><div class="line">&lt; (3) [1, 2, 3]</div><div class="line">&gt; Object.keys(foo)</div><div class="line">&lt; (3) [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</div><div class="line">&gt; Object.entries(foo)</div><div class="line">&lt; (3) [Array(2), Array(2), Array(2)]0: Array(2)1: Array(2)2: Array(2)length: 3__proto__: Array(0)</div><div class="line"></div><div class="line">------</div><div class="line">&gt; Object.entries(&#123; one: 1, two: 2 &#125;)</div><div class="line">[ [ &apos;one&apos;, 1 ], [ &apos;two&apos;, 2 ] ]</div><div class="line"></div><div class="line">&gt; Object.entries(&#123; [Symbol()]: 123, foo: &apos;abc&apos; &#125;);</div><div class="line">[ [ &apos;foo&apos;, &apos;abc&apos; ] ]</div></pre></td></tr></table></figure>
<ul>
<li><a href="http://2ality.com/2015/11/stage3-object-entries.html" target="_blank" rel="external">ES proposal: Object.entries() and Object.values()</a></li><li><a href="https://github.com/tc39/proposal-object-values-entries" target="_blank" rel="external">Object.values/Object.entries</a></li></ul>
<h3 id="字符串填充"><a href="#字符串填充" class="headerlink" title="字符串填充"></a>字符串填充</h3><p>针对 <code>String</code> 对象，引入了 <code>String Padding</code> 的规范，为字符串的处理添加了两个字符串填充的方法：<code>padStart</code> 和 <code>padEnd</code>。</p>
<h4 id="String-prototype-padStart"><a href="#String-prototype-padStart" class="headerlink" title="String.prototype.padStart"></a>String.prototype.padStart</h4><p>字符串的头部填充。接收两个参数 <code>String.prototype.padStart(maxLength, fillString=&#39; &#39;)</code>，第一个参数为填充的最大长度，第二个参数为指定填充的字符串。</p>
<p>假设我们有一个这样的操作：<code>s.padStart(n, f)</code>，s 为待填充的字符串，n 为填充后的长度，f 为填充的字符串。如果 f 的长度不够 n，则会重复使用，直到填充的长度达到了 n。如果 s 本身的长度已经超过 n 则不会进行填充。</p>
<h4 id="String-prototype-padEnd"><a href="#String-prototype-padEnd" class="headerlink" title="String.prototype.padEnd"></a>String.prototype.padEnd</h4><p>跟上面的方法类似，填充的位置在后面，其他处理方式一致。</p>
<ul>
<li><a href="https://github.com/tc39/proposal-string-pad-start-end" target="_blank" rel="external">ECMAScript spec proposal for String.prototype.{padStart,padEnd}</a></li></ul>
<h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h3><p>该方法是 <code>Object.getOwnPropertyDescriptor</code> 的复数形式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOwnPropertyDescriptors</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> result = &#123;&#125;;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Reflect</span>.ownKeys(obj)) &#123;</div><div class="line">    result[key] = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>旨在简化对象复制的过程，它允许装饰器能够轻松的从另一个类或对象中提取出所有描述符，并将它们分配给一个新的对象。</p>
<p>由于 <code>Object.assign</code> 方法不够完美，这个是用一种吞噬行为的方式复制对象，也就是依然会出现键值覆盖的情形。</p>
<p>配合 <code>Object.create</code> 可以实现一个对象的深拷贝：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> clone = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj), <span class="built_in">Object</span>.getOwnPropertyDescriptors(obj));</div></pre></td></tr></table></figure>
<p>更多 <code>Object.getOwnPropertyDescriptor</code> 的使用场景可以参阅：<a href="http://2ality.com/2016/02/object-getownpropertydescriptors.html" target="_blank" rel="external">ES proposal: Object.getOwnPropertyDescriptors()</a>。</p>
<h3 id="函数的拖尾逗号"><a href="#函数的拖尾逗号" class="headerlink" title="函数的拖尾逗号"></a>函数的拖尾逗号</h3><p>以前的函数在参数定义时或者调用时，不允许出现拖尾逗号，如下面的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span></span></div><div class="line">  bar,</div><div class="line">  baz,</div><div class="line">) &#123; ... &#125;</div><div class="line">foo(</div><div class="line">  param1,</div><div class="line">  param2,</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在之前的版本中是错误的，但是新规范中，这可以的，拖尾逗号将被忽略，如同<strong>数组和对象字面量</strong>中的拖尾逗号。</p>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ul>
<li><a href="http://2ality.com/2016/01/ecmascript-2016.html" target="_blank" rel="external">The final feature set of ECMAScript 2016 (ES7)</a></li><li><a href="https://github.com/tc39/proposals/blob/master/README.md#active-proposals" target="_blank" rel="external">tc39/proposals - Active proposals</a></li></ul>
]]></content>
    
    <summary type="html">
    
      近日 TC39 正式发布了 ECMAScript 的第八个版本的规范，包含了许多新特性，本文根据 2ality 的文章对这些新特性进行一个综合整理与翻译。
    
    </summary>
    
      <category term="WEB" scheme="http://xovel.cn/categories/web/"/>
    
      <category term="JS" scheme="http://xovel.cn/categories/web/js/"/>
    
    
      <category term="js" scheme="http://xovel.cn/tags/js/"/>
    
      <category term="es" scheme="http://xovel.cn/tags/es/"/>
    
      <category term="es8" scheme="http://xovel.cn/tags/es8/"/>
    
  </entry>
  
  <entry>
    <title>npm install 命令参数的一些简写方式</title>
    <link href="http://xovel.cn/article/npm-alias.html"/>
    <id>http://xovel.cn/article/npm-alias.html</id>
    <published>2017-05-19T16:32:38.000Z</published>
    <updated>2017-05-21T15:56:40.213Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 <code>npm install</code> 命令时，有许多指定参数的命令是可以进行缩写的，本文就简单梳理一下。</p>
<p><code>npm install</code>本身有一个别名，即<code>npm i</code>，可以使用这种缩写方式来运行命令，打到简化的效果。</p>
<p>以下为指定的一些命令行参数的缩写方式：</p>
<h3 id="g"><a href="#g" class="headerlink" title="-g"></a><code>-g</code></h3><p><code>--global</code>，缩写为<code>-g</code>，表示安装包时，视作全局的包。安装之后的包将位于系统预设的目录之下，一般来说</p>
<h3 id="S"><a href="#S" class="headerlink" title="-S"></a><code>-S</code></h3><p><code>--save</code>，缩写为<code>-S</code>，表示安装的包将写入<code>package.json</code>里面的<code>dependencies</code>。</p>
<h3 id="D"><a href="#D" class="headerlink" title="-D"></a><code>-D</code></h3><p><code>--save-dev</code>，缩写为<code>-D</code>，表示将安装的包将写入<code>packege.json</code>里面的<code>devDependencies</code>。</p>
<h3 id="O"><a href="#O" class="headerlink" title="-O"></a><code>-O</code></h3><p><code>--save-optional</code>缩写为<code>-O</code>，表示将安装的包将写入<code>packege.json</code>里面的<code>optionalDependencies</code>。</p>
<h3 id="E"><a href="#E" class="headerlink" title="-E"></a><code>-E</code></h3><p><code>--save-exact</code>缩写为<code>-E</code>，表示安装的包的版本是精确指定的。</p>
<h3 id="B"><a href="#B" class="headerlink" title="-B"></a><code>-B</code></h3><p><code>--save-bundle</code>缩写为<code>-B</code>，表示将安装的包将写入<code>packege.json</code>里面的<code>bundleDependencies</code>。</p>
<hr>
<blockquote>
<p><code>https://docs.npmjs.com/cli/install</code>，参考来源。</p>
</blockquote>
<hr>
<p><del>好吧，这篇算作是滥竽充数</del>，六月计划提前开始吧。做一个有内涵的技术写作者是得有多大的勇气呢？</p>
]]></content>
    
    <summary type="html">
    
      对 npm install 命令的一些参数的简写方式，这里稍作一番总结，主要是为了方便查阅。
    
    </summary>
    
      <category term="开发" scheme="http://xovel.cn/categories/dev/"/>
    
      <category term="文档" scheme="http://xovel.cn/categories/dev/docs/"/>
    
    
      <category term="npm" scheme="http://xovel.cn/tags/npm/"/>
    
      <category term="install" scheme="http://xovel.cn/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>angular函数组件简介</title>
    <link href="http://xovel.cn/article/angular-function.html"/>
    <id>http://xovel.cn/article/angular-function.html</id>
    <published>2017-05-17T14:20:40.000Z</published>
    <updated>2017-05-19T16:30:35.808Z</updated>
    
    <content type="html"><![CDATA[<p>本人前段时间对<code>angular</code>进行了一定程度的了解，<code>angular</code>系列的博文就从本篇开始吧。本文就对其提供的函数组件做一个入门级的介绍。大部分文档直接翻译自官方文档：<a href="https://docs.angularjs.org/api/ng/function" target="_blank" rel="external">Function components in ng</a>。</p>
<blockquote>
<p>阅读本文需要一定的<code>jQuery</code>基础。</p>
</blockquote>
<p>在函数组件中，<code>angular</code>提供了许多方便使用的功能，下面我将按照官方文档的顺序一一做介绍。</p>
<h3 id="angular-forEach"><a href="#angular-forEach" class="headerlink" title="angular.forEach"></a>angular.forEach</h3><p>遍历数组或对象。功能类似<a href="http://api.jquery.com/each/" target="_blank" rel="external"><code>jQuery.each</code></a>。不同的是<code>angular.forEach</code>支持传入一个上下文作为第三个参数：<code>angular.forEach(obj, iterator, [context]);</code>。</p>
<h3 id="angular-extend"><a href="#angular-extend" class="headerlink" title="angular.extend"></a>angular.extend</h3><p>扩展对象。功能类似<code>jQuery.extend</code>，不过这里是个浅复制。</p>
<h3 id="angular-merge"><a href="#angular-merge" class="headerlink" title="angular.merge"></a>angular.merge</h3><p>合并对象，深度合并，可以视为深复制。</p>
<h3 id="angular-noop"><a href="#angular-noop" class="headerlink" title="angular.noop"></a>angular.noop</h3><p>空操作，即：<code>function () {}</code>。</p>
<h3 id="angular-identity"><a href="#angular-identity" class="headerlink" title="angular.identity"></a>angular.identity</h3><p>返回第一个参数本身，用于函数式编程。</p>
<h3 id="angular-isUndefined"><a href="#angular-isUndefined" class="headerlink" title="angular.isUndefined"></a>angular.isUndefined</h3><p>判断参数是否为<code>undefined</code>。</p>
<h3 id="angular-isDefined"><a href="#angular-isDefined" class="headerlink" title="angular.isDefined"></a>angular.isDefined</h3><p>判断参数是否被定义过，与<code>angular.isUndefined</code>的结果相反。</p>
<h3 id="angular-isObject"><a href="#angular-isObject" class="headerlink" title="angular.isObject"></a>angular.isObject</h3><p>判断参数是否为对象。</p>
<blockquote>
<p>不同于<code>typeof</code>，<code>null</code>将被视为非对象，数组视为对象。</p>
</blockquote>
<h3 id="angular-isString"><a href="#angular-isString" class="headerlink" title="angular.isString"></a>angular.isString</h3><p>判断参数是否为字符串。</p>
<h3 id="angular-isNumber"><a href="#angular-isNumber" class="headerlink" title="angular.isNumber"></a>angular.isNumber</h3><p>判断参数是否为数组，包括<code>NaN</code>、<code>+Infinity</code>以及<code>-Infinity</code>。</p>
<h3 id="angular-isDate"><a href="#angular-isDate" class="headerlink" title="angular.isDate"></a>angular.isDate</h3><p>判断参数是否是一个日期对象。</p>
<h3 id="angular-isArray"><a href="#angular-isArray" class="headerlink" title="angular.isArray"></a>angular.isArray</h3><p><code>Array.isArray</code>的别名，判断是否为数组。</p>
<h3 id="angular-isFunction"><a href="#angular-isFunction" class="headerlink" title="angular.isFunction"></a>angular.isFunction</h3><p>判断是否为函数。</p>
<h3 id="angular-isElement"><a href="#angular-isElement" class="headerlink" title="angular.isElement"></a>angular.isElement</h3><p>判断是否为<code>DOM</code>元素或者<code>jQuery</code>元素。</p>
<h3 id="angular-copy"><a href="#angular-copy" class="headerlink" title="angular.copy"></a>angular.copy</h3><p>复制对象或数组，深复制。</p>
<h3 id="angular-equals"><a href="#angular-equals" class="headerlink" title="angular.equals"></a>angular.equals</h3><p>判断两个参数是否相等。</p>
<p>符合以下条件之一的均视为相等：</p>
<ul>
<li>通过严格等于<code>===</code>的判断</li><li>对象的类型一样并且其所有属性通过<code>angular.equals</code>判断均相等</li><li>两者均为<code>NaN</code></li><li>两者为正则表达式，并且其表达式相等</li></ul>
<h3 id="angular-bind"><a href="#angular-bind" class="headerlink" title="angular.bind"></a>angular.bind</h3><p>对函数进行绑定对象。<code>angular.bind</code>的参数形式类似函数的<code>call</code>方法。</p>
<p>通常用于偏函数和柯里化。</p>
<h3 id="angular-toJson"><a href="#angular-toJson" class="headerlink" title="angular.toJson"></a>angular.toJson</h3><p>转为<code>JSON</code>风格的字符串。这个过程可以称之为序列化。</p>
<h3 id="angular-fromJson"><a href="#angular-fromJson" class="headerlink" title="angular.fromJson"></a>angular.fromJson</h3><p>将一个<code>JSON</code>字符串还原，即反序列化。</p>
<h3 id="angular-bootstrap"><a href="#angular-bootstrap" class="headerlink" title="angular.bootstrap"></a>angular.bootstrap</h3><p>手动启动<code>AngularJS</code>的应用程序。</p>
<h3 id="angular-reloadWithDebugInfo"><a href="#angular-reloadWithDebugInfo" class="headerlink" title="angular.reloadWithDebugInfo"></a>angular.reloadWithDebugInfo</h3><p>以调试模式重载当前的应用程序。</p>
<h3 id="angular-injector"><a href="#angular-injector" class="headerlink" title="angular.injector"></a>angular.injector</h3><p>注入器的声明与使用。详情可参阅：<a href="https://docs.angularjs.org/guide/di" target="_blank" rel="external">dependency injection</a></p>
<h3 id="angular-element"><a href="#angular-element" class="headerlink" title="angular.element"></a>angular.element</h3><p>以<code>jQuery</code>风格包裹<code>DOM</code>元素或者<code>HTML String</code>。如果未引入<code>jQuery</code>，则采用<code>angular</code>自带的<code>jqLite</code>简化版。<code>jqLite</code>提供常见的<code>jQuery API</code>，可以满足大部分的情况。</p>
<h3 id="angular-module"><a href="#angular-module" class="headerlink" title="angular.module"></a>angular.module</h3><p><code>angular</code>的核心，用于声明或者获取模块。</p>
<h3 id="angular-errorHandlingConfig"><a href="#angular-errorHandlingConfig" class="headerlink" title="angular.errorHandlingConfig"></a>angular.errorHandlingConfig</h3><p>错误处理的配置。</p>
<hr>
<p>至此，<code>angular</code>自带的函数组件就梳理完毕了。更多详细的介绍，就请诸君自行查阅相关文档了。</p>
<p>接下来的空余时间里面，将会逐步针对<code>angular</code>里面的知识点做一个全面的介绍。</p>
<blockquote>
<p>通常来说，本系列博文对应的<code>angular</code>的版本为<code>1.6.x+</code>。</p>
</blockquote>
<hr>
<p>部分函数，诸如<code>angular.lowercase</code>，<code>angular.uppercase</code>已经被废弃，故此这里也不再列出。</p>
]]></content>
    
    <summary type="html">
    
      本文为针对AngularJS中的自带的函数组件的简要介绍。
    
    </summary>
    
      <category term="WEB" scheme="http://xovel.cn/categories/web/"/>
    
      <category term="JS" scheme="http://xovel.cn/categories/web/js/"/>
    
    
      <category term="angular" scheme="http://xovel.cn/tags/angular/"/>
    
      <category term="function" scheme="http://xovel.cn/tags/function/"/>
    
      <category term="components" scheme="http://xovel.cn/tags/components/"/>
    
      <category term="angularjs" scheme="http://xovel.cn/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>浅谈英文的缩写</title>
    <link href="http://xovel.cn/article/abbreviation.html"/>
    <id>http://xovel.cn/article/abbreviation.html</id>
    <published>2017-05-07T14:42:52.000Z</published>
    <updated>2017-05-07T16:30:30.758Z</updated>
    
    <content type="html"><![CDATA[<p>最近对一些英文单词的发音，有一些困惑，比如<code>APP</code>的发音，有些人念标准发音<code>æp</code>，有些人则念作按单字母一一念出。这里我们不讨论到底哪一种念法更为妥帖，相反的，我倒是对<code>APP</code>这种缩写方式产生了兴趣，那么，本篇文章就对英文缩写词做一个简单的梳理吧。</p>
<a id="more"></a>
<h3 id="缩写词的类型"><a href="#缩写词的类型" class="headerlink" title="缩写词的类型"></a>缩写词的类型</h3><p>通常，英文的缩写的方式有很多种，本文讲述几个常见的吧。</p>
<h4 id="截短"><a href="#截短" class="headerlink" title="截短"></a>截短</h4><blockquote>
<p><code>Shortening</code></p>
</blockquote>
<p>简单粗暴，就是直接从单词或者短语中截取能够代表核心意思的片段。</p>
<ul>
<li>缩写这个词本身<code>abbreviation</code>，其缩写为<code>abbr</code>。</li><li>编程领域经常会碰到的<code>sync</code>和<code>async</code>（同步和异步），就是<code>synchronous</code>和<code>asynchronous</code>的缩写。</li><li>举一个冷知识的例子：博客<code>blog</code>其实就是网络日志<code>weblog</code>的缩写。</li><li>翻阅英文字典，通常会发现单词的词性一栏，都是用的缩写，这个缩写方式就是截短，比如形容词<code>adj</code>/<code>adjective</code>，动词<code>v</code>/<code>verb</code>。</li></ul>
<h4 id="收缩"><a href="#收缩" class="headerlink" title="收缩"></a>收缩</h4><blockquote>
<p><code>Contraction</code></p>
</blockquote>
<p>跟上面提到的截短类似，收缩的方式通常省略部分字母。</p>
<ul>
<li><code>Dr.</code>是<code>Doctor</code>的缩写</li><li><code>Mr.</code>是<code>Mister</code>的缩写</li></ul>
<p>如果是短语中出现这样的情形，通常会使用单引号<code>&#39;</code>来替换被省略的部分。</p>
<ul>
<li><code>It is me.</code> 可以缩写为<code>It&#39;s me.</code>。</li><li><code>because</code>在某些俚语中，缩写为<code>&#39;cause</code>。</li><li><code>cannot</code>缩写为<code>can&#39;t</code>。</li></ul>
<p>注意，有些词的缩写可能会变更部分字母，比如<code>example</code>的缩写是<code>eg</code>。</p>
<h4 id="融合"><a href="#融合" class="headerlink" title="融合"></a>融合</h4><blockquote>
<p><code>Crasis</code></p>
</blockquote>
<p>这个在英文中并不常见，其他语种，比如法语，希腊语中出现的较多。<del>嗯，这一节还是忽略掉，不做深入解释了。</del></p>
<h4 id="拼合"><a href="#拼合" class="headerlink" title="拼合"></a>拼合</h4><blockquote>
<p><code>Blend</code></p>
</blockquote>
<p>由短语中的各个单词拼合而成。</p>
<p>比如<code>smog</code>（烟雾）这个词，是由<code>smoke</code>（烟）和<code>fog</code>（雾）拼合而成；再比如<code>workaholic</code>（工作狂）是由<code>work</code>（工作）和<code>alcoholic</code>（酒鬼）拼合而成。</p>
<blockquote>
<p>这种拼合方式已经属于英文中的造字法了，更多知识请自行了解，这里不做展开。</p>
</blockquote>
<h4 id="首字母拼合"><a href="#首字母拼合" class="headerlink" title="首字母拼合"></a>首字母拼合</h4><blockquote>
<p><code>Initialism</code></p>
</blockquote>
<p>同样的简单粗暴，短语的首个单词提取出来然后拼合成一个新词。大部分地名、机构、职位、专业术语的缩写通过这种方式进行，比如<code>UK</code>、<code>FBI</code>、<code>CEO</code>、<code>UFO</code>。</p>
<h4 id="缩略词"><a href="#缩略词" class="headerlink" title="缩略词"></a>缩略词</h4><blockquote>
<p><code>Acronym</code></p>
</blockquote>
<p>跟上面提到的首字母拼合基本类似。通常来说，缩略词跟首字母拼合还是有一定细微差别的：</p>
<ul>
<li>缩略词会适当忽略掉短语中出现的一些副词，比如中国的缩写<code>PRC</code>的全称是<code>People&#39;s Republic of China</code></li><li>缩略词是根据短语或者单词的意思进行综合提取进行缩写，并不一定是首字母拼合，比如<code>HTML</code>这个缩略词的全称是<strong>H</strong>yper<strong>t</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage，再比如<code>REST</code>的全称<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer。</li></ul>
<h4 id="逆缩略词"><a href="#逆缩略词" class="headerlink" title="逆缩略词"></a>逆缩略词</h4><blockquote>
<p><code>Backronym</code></p>
</blockquote>
<p>黑科技无误。先有缩写，再来定义全称。</p>
<h3 id="缩写后的发音"><a href="#缩写后的发音" class="headerlink" title="缩写后的发音"></a>缩写后的发音</h3><p>缩略词会尽可能按照重新组装后的单词进行发音，比如<code>JPEG</code>（<strong>J</strong>oint <strong>P</strong>hotographic <strong>E</strong>xperts <strong>G</strong>roup）这个缩写词，读作<code>[ˈdʒeˌpɛɡ]</code>（美式发音，下同）。</p>
<p>有些发音还有点特别，比如<code>OS X</code>，读作<code>[ˈmæk ˌoʊ ˌɛs ˈtɛn]</code>，<code>IEEE</code>读作<code>I triple E</code>。</p>
<blockquote>
<p>对于缩略出来的词没法读的时候，直接按字母念就好了。</p>
</blockquote>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://en.wikipedia.org/wiki/Abbreviation" target="_blank" rel="external">Abbreviation - Wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Acronym" target="_blank" rel="external">Acronym - Wikipedia</a></li><li><a href="https://www.thoughtco.com/what-is-abbreviation-1689046" target="_blank" rel="external">What Is an Abbreviation?</a></li></ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近对一些英文单词的发音，有一些困惑，比如&lt;code&gt;APP&lt;/code&gt;的发音，有些人念标准发音&lt;code&gt;æp&lt;/code&gt;，有些人则念作按单字母一一念出。这里我们不讨论到底哪一种念法更为妥帖，相反的，我倒是对&lt;code&gt;APP&lt;/code&gt;这种缩写方式产生了兴趣，那么，本篇文章就对英文缩写词做一个简单的梳理吧。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://xovel.cn/categories/essay/"/>
    
    
      <category term="abbreviations" scheme="http://xovel.cn/tags/abbreviations/"/>
    
      <category term="abbr" scheme="http://xovel.cn/tags/abbr/"/>
    
  </entry>
  
  <entry>
    <title>Brackets的使用与emmet插件安装的一个问题</title>
    <link href="http://xovel.cn/article/brackets-emmet.html"/>
    <id>http://xovel.cn/article/brackets-emmet.html</id>
    <published>2017-04-04T14:51:51.000Z</published>
    <updated>2017-04-04T15:01:57.562Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文章来自于本博客的issue，同时也记录到了个人日志的项目中去了。</p>
</blockquote>
<p><em>以下为正文</em></p>
<hr>
<p>最近决定将IDE迁移到<a href="http://brackets.io/" target="_blank" rel="external">brackets</a>，毕竟是adobe开发的用来替代古老臃肿的Dreamweaver的，口号就是<code>Code The Web</code>，为Web编程提供一套完善的IDE。</p>
<hr>
<p>为什么是brackets？其实是可以用sublime的，但是sublime只是一个编辑器，没有IDE的一些特性，即便是有了插件的支持，也很难与大型IDE媲美。</p>
<p>回想我用过的IDE，最开始的FrontPage，到VS，再到后来的初次全面接触前端开发使用的Dreamweaver。而后离开福建回到湖南，开始抛弃Dreamweaver，换了一种非常极端的方式：放弃了IDE，直接采用常规编辑器Notepad++、UltraEdit来进行代码的编写。那滋味其实也还好，毕竟，那个时候最IDE的要求并不高，所使用的后台语言是asp，都用不着开带着各种兼容性问题的Dreamweaver。</p>
<p>之后的正式将主要编辑器从Notepad++转移到Sublime Text 3上面来了。用了很长一段时间的Sublime Text之后被其优雅的处理代码的方式所吸引。当然这过程中间也是过诸多其他的编辑器和IDE，比如Atom，Brackets，VS2012，那个时候还是偏向于使用纯粹的编辑器的。当然Notepad++因为处理多个文件方面的优势，我也一直在使用。</p>
<p>在现在这个公司工作之后，由于项目采用的配套的IDE，也就是可以称得上是超级IDE的WebStorm，重心也就转移到了WebStorm上面了。经过这么三四个月的使用，发现虽然功能强大，但是我依然觉得繁琐，电脑性能问题，并不容易很好的支持超大项目的处理，这个时候Sublime的优势再一次得到展现，处理大量文件毫不费力。</p>
<p>我试图将IDE改成Atom，毕竟这东西是github自家产物，但却不知道为何我迟迟没有进行这一项操作。我想我应该总有一天会使用这一款颇受好评的代码编辑工具的吧。vim这个应该也是差不多，因为现在并没有过多的接触后台操作，也不太习惯纯粹的命令行操作方式，希望以后能有机会成为传说中的vim重度依赖者吧。现阶段的我最多就是在bash里面运行几个简单的命令。</p>
<hr>
<p>之前也不知道为什么，我写markdown的工具都是打开的brackets，这个跟之前sublime的markdown插件的预览带进了巨坑是有一定关系的，至今不想再跳进去，索性就换了个编辑markdown的工具，挑来挑去，最后就是选择了brackets，仅仅是因为其界面的优雅。</p>
<p>其实，现阶段的我依然是各路编辑器和IDE混用的，因为有时候同一个项目要被各种查看，一个IDE并不能胜任，于是就出现了我同时打开了WebStorm、Atom、Brackets、Notepad++、Sublime，甚至还搬出了多年不再使用的UltraEdit，是的，它们同时打开了同一个项目。我都不敢想象为什么我会变得如此疯狂。</p>
<p>既然是要采用Brackets作为近阶段的IDE，那么就安装几个插件来让它如虎添翼吧。官方推荐的插件，我安装了几个自己认为重要的，现在我自己的电脑上的Brackets插件的安装情况大概是这个样子的：</p>
<ul>
<li><code>brackets-beautify</code>，官方推荐，代码美化工具，<strong>是的，格式化之后的代码很美！</strong></li><li><code>brackets-display-shortcuts</code>，显示快捷键列表的插件，安装好之后在帮助菜单里面执行，就可以看到当前所有的快捷键了。</li><li><code>brackets-emmet</code>，是的，这就是本文要提到的核心插件，一个快速写HTML代码的工具，那速度绝对快的飞起。</li><li><code>brackets-indent-guides</code>，显示缩进的指示线。简单又粗暴，绝对是深度依赖者的必装插件。</li><li><code>brackets-minimap</code>，当初是因为什么爱上了sublime？没错，就是因为有代码缩略地图。基本上现在用一款编辑工具，首先会去看看没有代码小地图工具，有的话先装起来再说。</li><li><code>pop-up-menu</code>，这是一个对编辑的工作区域内的右键菜单进行提升的插件，增加了一些便利性操作。</li><li><code>exclude-folders</code>，打开文件夹时，过滤指定文件夹的插件。过滤了<code>node_modules</code>文件夹之后，项目的打开速度得到了明显的提升。但是看不到node_modules文件夹还是总觉得有点欠缺的。</li><li><code>markdown-preview</code>，markdown预览插件。作为一个重度markdown使用者，这插件对我来说也是极好的。</li><li><code>file-icons</code>，简单粗暴，给打开的各路文件的前面显示一个图标。优雅美观说的就是这样的效果。</li><li><code>monokai-theme</code>，Sumline Text的爱好者对这个那必须是钟爱莫名的，非常精致的代码配色方案。</li><li><code>color-palette</code>，取色器，好用不解释。</li></ul>
<p>嗯，这些插件的安装其实并不是顺利，因为有<del>强大的</del>GFW的存在，悲催的brackets因为调用了aws的资源，所以有时候那速度卡的飞起，所以大部分插件我都是通过github的zip链接进行安装的。</p>
<p>安装完毕了之后，慕名已久的emmet插件一直不肯工作，这到底是为什么？</p>
<p>可能是因为疏忽大意了，一直迟迟忘记了brackets是基于HTML/JS构建出来的编辑工具，其界面上面是自带了Chrome DevTools的。为了这个问题，我几乎是找遍了brackets、emmet、stackoverflow上面的所有资源，依然是没有解决这个问题，后来又想，干脆手动安装一次，完全的纯粹的手动方式：</p>
<ol>
<li>进入brackets的插件目录，我的是win10环境，所以在<code>C:\Users\xovel\AppData\Roaming\Brackets\extensions</code>这里。</li><li>进入user文件夹，打开bash。</li><li>在bash里面执行git clone操作。</li><li>clone完成之后进入插件目录<code>brackets-emmet</code>，继续执行依赖安装操作<code>npm install</code>。</li><li>安装完毕之后会发现，目录下多了个node_modules文件夹。</li><li>进去一看，里面有两个文件夹，分别是<code>emmet</code>和<code>caniuse-db</code>。</li><li>不管那么多，重启brackets。</li></ol>
<p>很遗憾，依然没有emmet功能。</p>
<p>几经周折，我终于看到了调试里面的开发工具，于是调出F12，看看到底是什么错误导致的。</p>
<p>果不其然，在控制台里面有一行错误提示：大意是缺少一个文件，这个文件就是<code>\brackets-emmet\node_modules\emmet\lib\caniuse.json</code>，我仔细去看了一遍，确实是没有这个文件。</p>
<p>这就比较尴尬了，会不是我这样的安装方式不对？我决定到一个全新的地方使用命令行的方式从npm上安装全新的emmet，使用<code>npm install emmet</code>命令之后，我竟然又执行了<code>npm install</code>，把emmet的开发依赖给安装了，甚至还跑了<code>gulp</code>任务，结果生成了一个dist文件夹，我感觉我这么做有点走弯路了，<del>是的，确实是走弯路，弯的很厉害</del>。不过看到dist下的<code>emmet.js</code>大小有<code>1868kb</code>的时候心里还是很是震惊的。</p>
<p>依然没有看到caniuse.json，我就在想，这个名字跟上面提到的<code>caniuse-db</code>，应该是存在着某种关联的吧。果不其然，上emmet的repo上一搜，发现一个<a href="https://github.com/emmetio/emmet/pull/385" target="_blank" rel="external">提交记录</a>被接受了，就是提议将<code>caniuse.json</code>换成<code>caniuse-db</code>的。好家伙，这就很尴尬了。</p>
<p>既然现在的版本已经被替换掉了，那么问题就相对来说简单了，我应该只需要找到这个缺失的文件并将它放到它应该出现的位置上就可以了。于是我通过repo的tag记录依次寻找，发现从1.3.2之后，这个caniuse.json就不见了踪影。也是说从1.4.0版本开始，丢弃了caniuse.json，改为使用caniuse-db进行可用性判定。</p>
<p>于是我复制了一份json到本地目录中，然后重启brackets，甚好，<code>Emmet</code>菜单出来了。而后打开一个html文件，飞速敲下<code>div&gt;ul&gt;li</code>，然后按下<code>tab</code>，一个良好缩进展现的HTML结构跃然纸上。</p>
<p>问题解决了，但我觉得应该不止我一个人被这个问题所困扰，后来我仔细看了一下<code>brackets-emmet</code>的插件的package文件，发现里面只有一个依赖：<code>&quot;emmet&quot;: &quot;^1.3.0&quot;</code>。好家伙，竟然是<code>&quot;^1.3.0&quot;</code>！</p>
<p><code>^</code>！！</p>
<p>让我说什么好呢？这语义化的版本控制机制，应该是被npm给更改了操作规则吧。因为安装出来的版本号显示的是1.6.2，这明显不科学。</p>
<p>于是我手动将这一行代码改成了：<code>&quot;emmet&quot;: &quot;1.3.0&quot;</code>，然后将整个node_modules个删了，并在bash里面重新走了一边安装的操作，这个时候出来的结果是只安装了一个emmet了。怀着一颗激动的心，我重启了brackets，嗯，甚好，Emmet还在。</p>
<p>至此，brackets上的emmet插件算是成功解决了。</p>
<hr>
<p>总结：瞎折腾之下，获取了宝贵的经验，也算是一种收获。<del>虽然内心觉得得不偿失</del></p>
]]></content>
    
    <summary type="html">
    
      本文介绍一下自己对于brackets的一些使用的心得，罗列安装的一些的插件，并着重讲述一下emmet这款插件的安装过程出现的问题，以及其对应的解决方案。
    
    </summary>
    
      <category term="开发" scheme="http://xovel.cn/categories/dev/"/>
    
    
      <category term="brackets" scheme="http://xovel.cn/tags/brackets/"/>
    
      <category term="IDE" scheme="http://xovel.cn/tags/IDE/"/>
    
      <category term="emmet" scheme="http://xovel.cn/tags/emmet/"/>
    
      <category term="plugin" scheme="http://xovel.cn/tags/plugin/"/>
    
      <category term="editor" scheme="http://xovel.cn/tags/editor/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Semicolon Insertion</title>
    <link href="http://xovel.cn/article/javascript-semicolons.html"/>
    <id>http://xovel.cn/article/javascript-semicolons.html</id>
    <published>2017-03-29T11:47:27.000Z</published>
    <updated>2017-03-29T14:53:00.491Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文转自：<a href="http://inimino.org/~inimino/blog/javascript_semicolons" target="_blank" rel="external">~inimino/blog</a></p>
</blockquote>
<p><strong>JavaScript Semicolon Insertion</strong></p>
<p><strong>Everything you need to know</strong></p>
<p><em>Friday, May 28, 2010</em></p>
<hr>
<p>Automatic semicolon insertion is one of JavaScript’s most controversial syntactic features. There are also many misconceptions surrounding it.</p>
<p>自动插入分号是JavaScript里最具有争议的语法特性。其周围也存在许多误解。</p>
<p>Some JavaScript programmers use semicolons at the end of every statement, and some use them only where strictly required. Most do something in between, and a few even intentionally add extra semicolons as a matter of style.</p>
<p>一些JavaScript程序员会在每一个语句后面都使用分号，有一些则只在有必要的时候使用。大多数人介于两者之间，也有少数人将特意添加额外的分号作为一种风格。</p>
<p>Even if you use semicolons at the end of every statement, some constructs parse in non-obvious ways. Regardless of your preferences in semicolon usage, you must know the rules to write JavaScript professionally. If you remember a few simple rules, all of which are explained here, you will be able to understand how any program you might encounter will be parsed, and will be an expert on JavaScript automatic semicolon insertion, or ASI.</p>
<p>即便是在每一个语句后面都跟分号，一些构造器依然会不那么明显的进行解析。不顾后果的使用分号，你必须知道专业地编写JavaScript代码的规则。如果能记住本文提出的一些简单的规则，你可以更好的理解程序是如何的解析的，并且可以在JavaScript自动分号插入（或者简称为<code>ASI</code>）方面成为专家。</p>
<h3 id="Where-Semicolons-are-Allowed"><a href="#Where-Semicolons-are-Allowed" class="headerlink" title="Where Semicolons are Allowed"></a>Where Semicolons are Allowed</h3><p><strong>分号在哪里是允许的？</strong></p>
<p>In the formal language grammar given in the ECMAScript specification, semicolons are shown at the end of each kind of statement in which they can appear. Here is the do-while statement:</p>
<p>根据ECMAScript标准指出的常规的语法，分号在各种语句的后面都可以出现。这里有一个<code>do-while</code>语句：</p>
<pre><code>do Statement while ( Expression ) ;
</code></pre><p>Semicolons also appear in the grammar at the end of var statements, expression statements (such as “<code>4+4;</code>“ or “<code>f();</code>“), continue, return, and break statements, and throw and debugger statements.</p>
<p>分号也可以出现在<code>var</code>声明语句，表达式语句（诸如<code>4+4;</code>、<code>f();</code>），<code>continue</code>、<code>return</code>、<code>break</code>语句，以及<code>throw</code>和<code>debugger</code>语句。</p>
<p>The empty statement is just a semicolon by itself, and is a legal statement in JavaScript. For this reason, “<code>;;;</code>“ is a valid JavaScript program; it parses as three empty statements, and runs by doing nothing three times.</p>
<p>空语句同样可以使用分号，这在JavaScript中也是可行的。鉴于这个原因，<code>;;;</code>是有效的JavaScript程序，它会解析成三个空语句，运行时会做三次啥也不做的事情。</p>
<p>Sometimes empty statements are actually useful, at least syntactically. For example, to write an infinite loop, one can write <code>while(1);</code>, where the semicolon is parsed as an empty statement, which makes the while statement syntactically valid. If the semicolon was omitted, the while statement would not be complete, because a statement following the loop condition is required.</p>
<p>事实上，至少在语法构成方面，有时候空语句是很有用的。举个例子，编写一个无限循环，可以这么写：<code>while(1);</code>，分号将被解析成一个空语句，这样可以使<code>while</code>语句的语法变得有效。如果省略分号，这个<code>while</code>语句就不完整了，因为后续的循环体是必须的。</p>
<p>Finally, semicolons appear in for loops of the form <code>for ( Expression ; Expression ; Expression ) Statement</code>, and of course they may appear as themselves inside strings and regular expression literals.</p>
<p><del>太长，任性不翻译了</del></p>
<h3 id="Where-Semicolons-May-be-Omitted"><a href="#Where-Semicolons-May-be-Omitted" class="headerlink" title="Where Semicolons May be Omitted"></a>Where Semicolons May be Omitted</h3><p>In the formal grammar used in the ECMAScript specification, the semicolons are included, as described above. However, the specification prose then gives rules which describe how the actual parsing differs from the formal grammar. These are described as though semicolons are inserted into the token stream while parsing, though this is just a specification convenience; in practice, parsers do not need to generate fake semicolon tokens, but can instead regard semicolons as optional in specific places in the grammar (for an example see <a href="http://boshi.inimino.org/3box/PanPG/grammars/ECMAScript_5.peg" target="_blank" rel="external">this parser expression grammar for ECMAScript</a>, particularly the Statement, EOS, EOSnoLB, and SnoLB rules). Where the specification says that a semicolon is inserted, this simply means that the statement currently being parsed is ended.</p>
<p>These semicolon insertion rules are specified in section 7.9 of <a href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf" target="_blank" rel="external">ECMA-262 [pdf]</a>.</p>
<p>The section gives three basic rules, followed by two exceptions.</p>
<p>The rules are:</p>
<ol>
<li>When the program contains a token that is not allowed by the formal grammar, then a semicolon is inserted if (a) there is a line break at that point, or (b) the unexpected token was a closing brace.</li><li>When the end of a file is reached, if the program cannot be parsed otherwise, then a semicolon is inserted.</li><li>When a “restricted production” is encountered and contains a line terminator in a place where the grammar contains the annotation “[no LineTerminator here]”, then a semicolon is inserted.</li></ol>
<p>Approximately, these rules state that a statement can be terminated without a semicolon either (a) before a closing brace, (b) at the end of the program, or (c) when the next token cannot be parsed otherwise, and furthermore that there are certain places in the grammar in which, if a line break appears, it terminates the statement unconditionally. The practical effects of these rules are discussed below.</p>
<p>The exceptions are that a semicolon is never inserted as part of the header of a for loop of the form <code>for ( Expression ; Expression ; Expression ) Statement</code>, and a semicolon is never inserted if it would be parsed as an empty statement.</p>
<p>What do these rules and exceptions mean in practice?</p>
<p>Firstly, a semicolon is optional only where there is a line break, a closing brace, or the end of the program. Semicolons are not optional between statements appearing on the same line. Additionally, a semicolon is not implied at the end of a line if the first token of the subsequent line can be parsed as part of the same statement.</p>
<p><code>42; &quot;hello!&quot;</code> is a valid program, as is <code>42\n&quot;hello!&quot;</code> (with the “\n” representing an actual linebreak), but <code>42 &quot;hello!&quot;</code> is not; the linebreak triggers semicolon insertion but linear whitespace does not. Also valid is “<code>if(x){y()}</code>“. Here “<code>y()</code>“ is an expression statement, which can be terminated by a semicolon, but since the next token is a closing brace, the semicolon is optional even though there is no linebreak.</p>
<p>The two exceptions, for loops and empty statements, can be demonstrated together:</p>
<pre><code>for (node=getNode();
     node.parent;
     node=node.parent) ;
</code></pre><p>This for loop takes the parent of a node repeatedly until a node is reached which has no parent. All of this is done in the header of the for loop, so we have nothing left for the statement inside the for loop to do. However, the for loop syntax requires a statement, so we use an empty statement. Even though all three of the semicolons in this example appear at the end of a line, all three of them are required, since a semicolon is never inserted in a for loop header or to create an empty statement.</p>
<h3 id="Restricted-Productions"><a href="#Restricted-Productions" class="headerlink" title="Restricted Productions"></a>Restricted Productions</h3><p>Restricted productions are those in which a line break cannot appear in a particular position, so if a line break appears there, it will prevent the program from parsing in that way, though it may still parse another way.</p>
<p>There are five restricted productions in the grammar, they are the postfix operators <code>++</code> and <code>--</code>, continue statements, break statements, return statements, and throw statements. Break and continue statements have an optional identifier which may be used to break or continue a particular labelled loop in which the statement appears. If this feature is used, the identifier must be used on the same line as the <code>break</code> or <code>continue</code> token. The following is a valid program:</p>
<pre><code>var c,i,l,quitchars
quitchars=[&apos;q&apos;,&apos;Q&apos;]
charloop:while(c=getc()){
    for (i=0; i&lt;quitchars.length; i++){
        if (c==quitchars[i]) break charloop
    }
    /* ... more code to handle other characters here ... */
}
</code></pre><p>If <code>getc()</code> reads a character from an input device and returns it, then the program will read characters, test each one of them to see if it is in <code>quitchars</code>, and if it is, break the input loop. Note that the labelled break statement is necessary to escape from the outer while loop and not only the inner for loop. The following program, differing only in whitespace, will also parse, but will not give the same result:</p>
<pre><code>var c,i,l,quitchars
quitchars=[&apos;q&apos;,&apos;Q&apos;]
charloop:while(c=getc()){
    for (i=0; i&lt;quitchars.length; i++){
        if (c==quitchars[i])
            break
                charloop
    }
    /* ... more code to handle other characters here ... */
}
</code></pre><p>Specifically, in the latter case, the <code>charloop</code> token is not part of the break statement. Since the break statement is restricted, the linebreak at that position terminates the break statement. The <code>charloop</code> token simply parses as a reference to a charloop variable, which will never be reached, and the break statement will terminate the inner loop, not the outer loop as was intended.</p>
<p>Here are examples illustrating the other four restricted productions:</p>
<pre><code>// PostfixExpression :                                            
//              LeftHandSideExpression [no LineTerminator here] ++
//              LeftHandSideExpression [no LineTerminator here] --
var i=1;
i
++;
</code></pre><p>This is a parse error, it does not parse as “<code>i++</code>“. A line terminator cannot appear before the postfix increment or decrement operator, so a “<code>++</code>“ or “<code>--</code>“ token at the start of the line will never parse as part of the preceding line.</p>
<pre><code>i
++
j
</code></pre><p>This is not a parse error: it parses as “<code>i; ++j</code>“ The pre-increment and -decrement expressions are not restricted, so a linebreak can occur between the “<code>++</code>“ or “<code>--</code>“ token and the expression which it modifies.</p>
<pre><code>// ReturnStatement: return [no LineTerminator here] Expressionopt ;
return
  {i:i, j:j}
</code></pre><p>This parses as an empty return statement, followed by an expression statement which will never be reached. The following all parse as intended:</p>
<pre><code>return {
  i:i, j:j}
return (
  {i:i, j:j})
return {i:i
       ,j:j}
</code></pre><p>Note that return statements can contain linebreaks within the expression, just not between the <code>return</code> token and the start of the expression. When semicolons are intentionally omitted, it is convenient that the return statement is a restricted production, as it allows the programmer to write an empty return statement without accidentally returning the value of the next line:</p>
<pre><code>function initialize(a){
  // if already initialized, do nothing
  if(a.initialized) return
  a.initialized = true
  /* ... initialize a ... */
}
</code></pre><p>Continue and throw statements are similar to break and return:</p>
<pre><code>continue innerloop // correct

continue
    innerloop;     // incorrect

// ThrowStatement : throw [no LineTerminator here] Expression ;
throw                                          // parse error
  new MyComplexError(a, b, c, more, args);
// Unlike the return, break, and continue statements, 
// the expression after &quot;throw&quot; is not optional, 
// so the above will not parse at all.
throw new MyComplexError(a, b, c, more, args); // correct
throw new MyComplexError(
    a, b, c, more, args);                      // also correct
// Any variation with &apos;new&apos; and &apos;throw&apos; on the same line is correct.
</code></pre><p>Note that indentation has no effect in parsing ECMAScript programs, but the presence or absence of line breaks does. Therefore, any tool that processes JavaScript source code may remove leading whitespace from lines (outside of string literals!) without changing the semantics of the program, but line breaks cannot be indiscriminately removed or replaced with spaces or semicolons. A minification tool that changes the semantics of valid programs is a broken tool, and the only way to write a correct tool is to use a complete and correct parser.</p>
<p>Line breaks following <code>return</code>, <code>break</code>, and <code>continue</code> or preceding <code>++</code> and <code>--</code> tokens can affect parsing. Since the productions above are the only restricted productions in the language, this implies that whitespace including linebreaks can be freely added anywhere else as desired to improve readability. In particular the logical, arithmetic, and string concatenation operators, the ternary or conditional operator, member access using the dot or bracket notations, function calls, and while loops, for loops, switch statements, and the rest of the control structures, can all be written with linebreaks freely used throughout.</p>
<p>As the specification says:</p>
<blockquote>
<p>The resulting practical advice to ECMAScript programmers is: A postfix <code>++</code> or <code>--</code> operator should appear on the same line as its operand. An Expression in a return or throw statement should start on the same line as the return or throw token. A Identifier in a break or continue statement should be on the same line as the break or continue token.</p>
</blockquote>
<p>The most commonly cited programmer error related to restricted productions is to put the return value on the line after the <code>return</code> token, especially common when the returned value is a large object or array literal or multiline string. Line break errors with postfix operators, break, continue, and throw statements are rarely seen in practice, for the simple reason that the erroneous line breaks look unnatural to most programmers and so are unlikely to be written.</p>
<p>The final subtlety of ASI arises from the first rule, which requires that the program contain a token which is not allowed by the formal grammar, before a semicolon will be inserted. When writing code with optional semicolons omitted, it is important to keep this rule in mind so that required semicolons are not inadvertently omitted as well. This rule is what makes it possible to extend statements across multiple lines, as in the following examples:</p>
<pre><code>return obj.method(&apos;abc&apos;)
          .method(&apos;xyz&apos;)
          .method(&apos;pqr&apos;)

return &quot;a long string\n&quot;
     + &quot;continued across\n&quot;
     + &quot;several lines&quot;

totalArea = rect_a.height * rect_a.width
          + rect_b.height * rect_b.width
          + circ.radius * circ.radius * Math.PI
</code></pre><p>The rule considers only the first token of the following line. If that token can parse as part of the statement, then the statement is continued (even if parsing fails a little further on: the language syntax is designed to only require one token of lookahead in the parser). If the first token cannot extend the statement, then a new statement begins (which the spec describes by saying a semicolon is inserted).</p>
<p>The potential for error arises whenever there is a pair of statements A and B such that both A and B are valid statements standing alone, but the first token of B can also be accepted as an extension of A. In such cases, if a semicolon is not provided, the parser will not parse B as a separate statement, and will either reject the program or parse it in a way that the programmer did not intend. Thus when semicolons are omitted, the programmer must beware any such statement pair separated by a linebreak as:</p>
<pre><code>A
B
</code></pre><p>Where B begins with a token that would be accepted by the parser if it had appeared at the end of line A.</p>
<p>The majority of JavaScript statements begin with an identifier, and the majority of the remainder begin with a keyword such as “var”, “function”, or “if”. For any such statement B beginning with a keyword or identifier, as well as any beginning with a string or number literal, there is no valid complete statement A such that the first token of B would be accepted by the parser as extending A. (The verification of this from the grammar is left as an exercise for the reader.)</p>
<pre><code>A
function f(x){return x*x}

// for any statement A, without any terminating semicolon,
// all of these examples will parse as intended

A
f(7)

A
&quot;a string&quot;.length
</code></pre><p>Unfortunately, there are five tokens that can appear both at the start of a statement, and as an extension of some complete statement A. These tokens are the open parenthesis “<code>(</code>“, open square brace “<code>[</code>“, slash or solidus “<code>/</code>“, and “<code>+</code>“ and “<code>-</code>“. Of these, the first two are problematic in practice.</p>
<p>This means it is not always the case that a line break can replace a semicolon between statements.</p>
<p>The spec gives the following example:</p>
<blockquote>
<pre><code>a = b + c
(d + e).print()
</code></pre><p>is not transformed by automatic semicolon insertion, because the parenthesised expression that begins the second line can be interpreted as an argument list for a function call:</p>
<pre><code>a = b + c(d + e).print
</code></pre></blockquote>
<p>The spec goes on to suggest, “In the circumstance that an assignment statement must begin with a left parenthesis, it is a good idea for the programmer to provide an explicit semicolon at the end of the preceding statement rather than to rely on automatic semicolon insertion.” A more robust alternative where semicolons are intentionally omitted is to include the semicolon at the beginning of the line, directly before the token that introduces the potential ambiguity:</p>
<pre><code>a = b + c
;(d + e).print()
</code></pre><p><del>上面的代码前面有很多空格，实际上在marked工具解析的时候会忽略代码前的空格</del></p>
<p>Statements beginning with open parentheses or square braces are somewhat rare, but do arise in practice.</p>
<p>Examples involving open square braces are more common now that “functional” operations such as map, filter, and forEach are common on arrays. It is often convenient to use an array literal with a forEach call which is evaluated for its side-effects, as in the following:</p>
<pre><code>[[&apos;January&apos;,&apos;Jan&apos;]
,[&apos;February&apos;,&apos;Feb&apos;]
,[&apos;March&apos;,&apos;Mar&apos;]
,[&apos;April&apos;,&apos;Apr&apos;]
,[&apos;May&apos;,&apos;May&apos;]
,[&apos;June&apos;,&apos;Jun&apos;]
,[&apos;July&apos;,&apos;Jul&apos;]
,[&apos;August&apos;,&apos;Aug&apos;]
,[&apos;September&apos;,&apos;Sep&apos;]
,[&apos;October&apos;,&apos;Oct&apos;]
,[&apos;November&apos;,&apos;Nov&apos;]
,[&apos;December&apos;,&apos;Dec&apos;]
].forEach(function(a){ print(&quot;The abbreviation of &quot;+a[0]+&quot; is &quot;+a[1]+&quot;.&quot;) })

[&apos;/script.js&apos;
,&apos;/style1.css&apos;
,&apos;/style2.css&apos;
,&apos;/page1.html&apos;
].forEach(function(uri){
   log(&apos;Looking up and caching &apos;+uri)
   fetch_and_cache(uri)})
</code></pre><p>In cases where array literals are used for their value in an assignment expression, or are passed to a function, they will not appear as the beginning of the statement, so an opening square brace as the first token is rare, but does occur.</p>
<p>The final troublesome token is the slash, and this one can be highly counterintuitive. Consider the following example:</p>
<pre><code>var i,s
s=&quot;here is a string&quot;
i=0
/[a-z]/g.exec(s)
</code></pre><p>On lines 1-3 we set up some variables, and on line 4, it appears, we construct a regexp literal <code>/[a-z]/g</code> which will globally match a-z, and then we evaluate this regexp against the string with the exec method. Since the return value of the exec() call is not used, this code is not very useful, but we might expect it to compile. However, the slash can not only appear at the beginning of a regexp literal, but also serves as the division operator. That means that the leading slash on line 4 will actually be parsed as a continuation of the assignment statement on the previous line. The entirety of lines three and four parses as the single statement “i equals 0 divided by [a-z] divided by g.exec(s)”.</p>
<p>This issue almost never arises in practice because there is seldom a practical reason to begin a statement with a regexp literal. In the example above, the value of the exec() call would usually be passed to a function or assigned to a variable, and in either case the line would no longer begin with a slash. One possible exception is, again, with the forEach Array method, which could be usefully used on the return value of an exec() call directly.</p>
<p>The operators “<code>+</code>“ and “<code>-</code>“ can be used as unary operators, to convert a value to the Number type and in the case of “<code>-</code>“ to reverse the sign. If used at the beginning of a statement with semicolons omitted, these can be interpreted as the corresponding binary operator, as a continuation of the previous statement. Even when semicolons are intentionally omitted, this is rarely a problem, as a leading unary operator is even less likely than a regexp literal to occur as the first token of a statement (and it does not look self-contained in the way that a parenthesized expression does). As with regexps, if the programmer wanted to coerce a value to a Number, it was probably to do something with that Number value, such as assign it to a variable or pass it to a function, and in either case the unary operator would not be the first token of the statement:</p>
<pre><code>var x,y,z
x = +y;    // useful
y = -y;    // useful
print(-y); // useful
+z;        // useless
</code></pre><p>In all such cases, when semicolons are omitted, the safest practice with lines beginning with an open parenthesis or square brace is to precede the token with a semicolon on the line itself. This advice also applies in the unlikely case of statements beginning with an arithmetic operator “<code>+</code>“, “<code>-</code>“, or “<code>/</code>“. In this way, even when semicolons are not used elsewhere, the line will be protected from misparsing regardless of how the line previous to it may change over time.</p>
<h3 id="Misconceptions"><a href="#Misconceptions" class="headerlink" title="Misconceptions"></a>Misconceptions</h3><p>Many new JavaScript programmers are advised to just use semicolons everywhere, and expect that if they do not intentionally use the semicolon insertion rules, they can safely ignore the existence of this entire language feature. This is not the case, because of the restricted productions described above, notably the return statement. When becoming aware of the restricted production issue, programmers may then become overly wary of linebreaks, and avoid them even when they would increase clarity. It is best to be familiar with all the rules for ASI so as to be able to read any code regardless of how it is written, and to write code that is as clear as it can be.</p>
<p>Another misconception is that bugs in browser JavaScript engines mean that using semicolons everywhere is safer, and will protect the developer from compatibility issues between browsers. This is simply not the case. All extant browsers implement the specification correctly with regard to ASI, and any bugs that may have existed are long since lost in the mists of early Web history. There is no reason to be concerned about browser compatibility in regard to semicolon insertion: all browsers implement the same rules and they are the rules given by the spec and explained above.</p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Should you omit optional semicolons or not? The answer is a matter of personal preference, but should be made on the basis of informed choice rather than nebulous fears of unknown syntactical traps or nonexistent browser bugs. If you remember the rules given here, you are equipped to make your own choices, and to read any JavaScript easily.</p>
<p>If you choose to omit semicolons where possible, my advice is to insert them immediately before the opening parenthesis or square bracket in any statement that begins with one of those tokens, or any which begins with one of the arithmetic operator tokens “<code>/</code>“, “<code>+</code>“, or “<code>-</code>“ if you should happen to write such a statement.</p>
<p>Whether you omit semicolons or not, you must remember the restricted productions (return, break, continue, throw, and the postfix increment and decrement operators), and you should feel free to use linebreaks everywhere else to improve the readability of your code.</p>
<p><del>全文完</del></p>
]]></content>
    
    <summary type="html">
    
      这是一篇发表于2010年5月28日的文章，本篇为转载，讲述关于JavaScript语法中的分号方面的问题。最近关于是否要去除不必要的分号的编程风格确认的时候，遇到了一些问题，很多支持去除分号的文章都引用了这一篇文章，故此这里纯粹作一个转载。
    
    </summary>
    
      <category term="开发" scheme="http://xovel.cn/categories/dev/"/>
    
    
      <category term="js" scheme="http://xovel.cn/tags/js/"/>
    
      <category term="semicolon" scheme="http://xovel.cn/tags/semicolon/"/>
    
      <category term="asi" scheme="http://xovel.cn/tags/asi/"/>
    
  </entry>
  
  <entry>
    <title>两次婚礼纪实</title>
    <link href="http://xovel.cn/article/record-to-two-special-weddings.html"/>
    <id>http://xovel.cn/article/record-to-two-special-weddings.html</id>
    <published>2017-03-20T13:31:52.000Z</published>
    <updated>2017-03-21T15:40:47.726Z</updated>
    
    <content type="html"><![CDATA[<p>在2017年的一月份，我以伴郎的身份分别出席了两场于我而言很重要的婚礼，很早以前我说过要对这个做一个详细的记录，今天特地前来重新回忆并描述一下，也算是对自己博客复苏计划的一个引子吧。</p>
<a id="more"></a>
<p>在我的个人日记中，也稍稍做了一个简短的介绍，详情可以参加本文下方的链接进行查看<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>
<hr>
<p>下面就开始重述吧，我会尽量回忆当时的场景。</p>
<p>先说第一场婚礼，这一场婚礼是我堂哥的婚礼。堂哥和嫂子其实很早以前就认识并相恋了，我在长沙就读大学的时候就已经见过嫂子，虽不说嫂子倾国倾城，但至少也是明艳动人。后来因为各种原因吧，我前往杭州逐梦，便失去了众位家人的联系，也就不太清楚堂哥和嫂子的发展情况。那个时候在每年过年的时候依稀听家人提起，堂哥的感情路线还是比较飘摇的，我想在辗转奔波之中堂哥与嫂子也是倍加珍惜对方了吧。</p>
<p>于是，就在今年，他们决定好了，一起步入婚姻的殿堂。</p>
<p>堂哥很早就给我打电话了，我当时自然二话不说，直接答应了堂哥的邀请。时间定在2017年的1月18日，农历的十二月二十一，据说是非常好的黄道吉日，我搜了一下日历，的确是有今日适合婚嫁的字样呢。</p>
<p>当时我已经在新公司上班了，于是我就去请了三天假，17号我就乘车回家了。当时的天气可能有一点点小雨，看起来似乎更增添了婚礼的浪漫气息。</p>
<p>18日清早，我便准备好了，直接去往了堂哥的新家，几番布置与准备，我们开始了迎亲的历程。当时堂哥的表哥也到了，我也是很久没有见到他了，上一次还是在好几年前，一转眼他的儿子都可以打酱油了。</p>
<p>早上有点蒙蒙雨，扎花车的队伍看起来也确实是有点手忙脚乱的样子。雨中扎花车，倒也别有一番韵味。</p>
<p>摄像师是我们初中同学的父亲，许久不见，他的表情依旧是那么的友善。</p>
<p>好吧，我已经忘记了到底有多少辆车子了。大队伍出发，前往嫂子的家中了。大概是开了有半个小时的样子吧，终于是到了。</p>
<p>嫂子的家距离县城其实也不算太远，我之前有以为是在我们镇里，看起来的确是我自己记错了。嫂子的家人也很友善，对我们这些接亲的人员也没有太多的为难。很有意思的一点就是，当时我们去接亲的时候，大门被锁了，当时我们不明就里，就把红包直接往里面洒了。得知真实的情况是小孩子太过于淘气任性，把门的反锁给弄坏了，外面和里面都无法打开。这就有点尴尬了，费了一番功夫总算是把门的问题给解决了。</p>
<hr>
<p><del>昨天写的内容，今天再来看，怎么都像是流水账，哈哈</del></p>
<hr>
<p>当天的接亲，等到好不容易门开了，结果新娘子却是在二楼，这着实令人尴尬，因为红包都撒了一半去了。我们自然也是二话不说，直奔二楼，然后新娘子自然是在屋里面的，我们开始推门。里面有人喊红包呢，于是我们也是积极的丢红包，依稀可以听到里面小孩子的嬉闹声，甚至开心的样子。</p>
<p>说起来撞门也没有花费太大的精力，因为里面只有三个人拦门。毕竟这个时间点，能回来的人并不会太多。</p>
<p>于是我们就算是接亲成功了，下楼一番客套，喝了点礼茶，然后就回程了。大约在十点不到的样子就回到了堂哥的新房。</p>
<p>嗯，顺便说一下堂哥的新房概况，房子面积大概是一百二十多，买的时候正直县城房价上涨的高峰阶段，然后装修是伯父亲力亲为全程督工的，总的花费应该是在15w的样子，总体效果还是蛮不错的。堂弟说他买了二十多个排插，然后全被用掉了，所以他总是感慨，房子里面到处是插座。</p>
<p>或许是我们太过于远离传统规矩，一些婆媳之间的规矩我们自然也是毫不知情，于是堂哥背着嫂子直接进了家门。然后按照预先的设定，一对新人喝了红枣莲子粥，喻示早生贵子，接着两个小男孩在大人的指导下蹦蹦跳跳上了床，这个习俗便就是所谓的“滚床”了。</p>
<p>十点半左右，我们出发前往举行婚礼的酒店。堂哥和嫂子，我还有伴娘，我们四个人便就在酒店的楼梯的台阶起始处迎接各路宾客。对于这样的场景，我确实是第一次，所有算是一点怯生吧，不过还好，老家这边的人还是挺随和的。一直到十二点，酒宴开始，司仪团队下来叫我们可以上楼准备婚礼了。</p>
<p>司仪是一个年轻小伙子，年龄与我们差不多，在他的主持之下，婚礼现场也是很有节奏感。一路按部就班的走下来，也是非常令人欢欣。让我印象有点深刻的是在改口茶环节，伯母的情绪异常激动，亲家母也很是激动，毕竟堂哥和嫂子的年纪也不算太小了。算一算，今年我都有28了，堂哥长我两岁，那是真真正正的奔三了的人啊。我因为一些特殊原因，至今没有成家，也算很是尴尬的事情。</p>
<p>席间，堂哥的表哥献唱了一首我也不知道名字的歌曲，唱的甚是贴合现场气氛。之后陪酒环节，我作为伴郎，跟着伴娘一起也是全程陪同堂哥和嫂子对所有宾客一一致敬。敬酒结束之后我应该是喝了许多酒的，于是接下来的事情我大多数都不记得了……</p>
<hr>
<p>嗯，堂哥的婚礼大概就描述到这里吧。</p>
<p>接下来是另一场重要的婚礼，即上面提到的，我表妹的婚礼。</p>
<p>重复的文字这里就不在赘述了，这里就说一下那段日记中间没有写完的场面吧。</p>
<p>婚礼现场定在靠近县政府的紫苑宾馆，场地应该是与前年表弟结婚的地方是一样的。请的司仪团队总体来说还算是过得去。婚车具体多少量我也给忘记了，应该是不下于十辆的吧。</p>
<p>由于是大年初四，这个日子，我也是翻了日历的，果不其然，是个绝佳的好日子。在迎亲的时候也碰到了许多其他的婚车队伍，就连我们扎花车的地方旁边，就有一个其他的婚车队伍。甚至，在紫苑宾馆的对面，便是另一对新人的婚礼现场。</p>
<p>整个婚礼流程也是按部就班形式的，基本上跟表弟的婚礼或者是堂哥的婚礼差不了多少。</p>
<p>开场节目表演是表弟携其妻子带来的一曲《美丽的神话》，不愧是科班出身，歌声一出惊艳四座。</p>
<hr>
<p>嗯，关于这两场的婚礼记录，就写这么多吧。</p>
<p>最近要开启提升团队能力的计划，具体的细节我需要思索一下，然后制定一个方案，届时也会在博客中公开发布。我虽然现在不是一个管理者，但我觉得团队中每个人都应该去思考这样的问题：如何去提升整个团队的作战水平。</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/xovel/diary/blob/master/2017/01/2017-01-31-wedding.md" target="_blank" rel="external">2017-01-31-wedding.md</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在2017年的一月份，我以伴郎的身份分别出席了两场于我而言很重要的婚礼，很早以前我说过要对这个做一个详细的记录，今天特地前来重新回忆并描述一下，也算是对自己博客复苏计划的一个引子吧。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://xovel.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="婚礼" scheme="http://xovel.cn/tags/%E5%A9%9A%E7%A4%BC/"/>
    
      <category term="记录" scheme="http://xovel.cn/tags/%E8%AE%B0%E5%BD%95/"/>
    
      <category term="感想" scheme="http://xovel.cn/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>React or Vue: Which Javascript UI Library Should You Be Using?</title>
    <link href="http://xovel.cn/article/react-or-vue-which-javascript-ui-library-should-you-be-using.html"/>
    <id>http://xovel.cn/article/react-or-vue-which-javascript-ui-library-should-you-be-using.html</id>
    <published>2017-01-09T13:04:07.000Z</published>
    <updated>2017-01-09T14:10:22.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Source: <a href="https://medium.com/js-dojo/react-or-vue-which-javascript-ui-library-should-you-be-using-543a383608d" target="_blank" rel="external">React or Vue: Which Javascript UI Library Should You Be Using?</a><br>Translation: 未完成，敬请期待。</p>
</blockquote>
<p><img src="http://ww4.sinaimg.cn/large/79be2309gw1fbkp0222bkj20rs0b3gov.jpg" alt=""></p>
<p>In 2016 React cemented its position as king of the Javascript web frameworks. This year saw rapid growth of both its web and native mobile libraries, and a comfortable lead over main rival Angular.</p>
<p>But 2016 has been an equally impressive year for Vue. The release of its version 2 made a huge impression on the Javascript community, attested to by the 25,000 extra Github stars it gained this year.</p>
<p>The scope of both React and Vue is undeniably similar: both are lightweight component-based libraries for building user interfaces that focus on the view layer only. Both can be used in a simple project, or be scaled up to a sophisticated app using cutting edge tooling.</p>
<p>As a result, a lot of web developers are wondering which one they should be using. Is one clearly superior over the other? Do they have specific pros and cons to be aware of? Or are they basically the same?</p>
<p><strong>Two frameworks, two advocates.</strong></p>
<p>In this article I want to answer those questions with a thorough and fair comparison. The only problem is: I’m an unashamed Vue fan-boy and totally biased. I’ve used Vue heavily in my projects this year, sung its praises here on Medium and even released a <a href="https://www.udemy.com/vuejs-2-essentials" target="_blank" rel="external">Udemy course</a>.</p>
<p>To even out my biased position I’ve bought in my friend Alexis Mangin who is both a great Javascript developer and a big React fan. He’s similarly immersed in React, using it frequently in both web and mobile projects.</p>
<p>Alexis asked me one day: “why are you so into Vue, and not React?” Since I didn’t know React that well, I couldn’t give a good answer. So I put the idea to him that we sit down one day with our laptops and show each other what our chosen library had to offer.</p>
<p><img src="http://ww2.sinaimg.cn/large/79be2309gw1fbkp00ztjzj20m80e2414.jpg" alt=""></p>
<blockquote>
<p>Anthony (left) and Alexis (right) comparing React and Vue at Bull and Bear Cafe in Chiang Mai, Thailand</p>
</blockquote>
<p>After a lot of discussion and learning from both sides, the following six points are our key findings.</p>
<p><strong>If you like building apps with templates (or want the option to), go with Vue.</strong></p>
<p>Putting your markup in an HTML file is the default option for a Vue app. Similar to Angular, moustache braces are used for data-binding expressions, while directives (special HTML attributes) are used for adding functionality to the template.</p>
<p>The follow demonstrates a simple Vue app. It prints a message and has a button that dynamically reverses the message:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// HTML</div><div class="line">&lt;div id=&quot;app&quot;&gt;</div><div class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</div><div class="line">  &lt;button v-on:click=&quot;reverseMessage&quot;&gt;Reverse Message&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">// JS</div><div class="line">new Vue(&#123;</div><div class="line">  el: &apos;#app&apos;,</div><div class="line">  data: &#123;</div><div class="line">    message: &apos;Hello Vue.js!</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    reverseMessage: function () &#123;</div><div class="line">      this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>In contrast, React apps shun templates and require the developer to create their DOM in Javascript, typically aided with JSX. Below is the same simple app implemented with React:</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HTML</span></div><div class="line">&lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="comment">// JS (pre-transpilation)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">message</span>: <span class="string">'Hello React.js!'</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  reverseMessage() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123; </div><div class="line">      <span class="attr">message</span>: <span class="keyword">this</span>.state.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) </div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.reverseMessage()&#125;&gt;</div><div class="line">          Reverse Message</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(App, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</div></pre></td></tr></table></figure>
<p>Templates are easier to understand for newer developers who’ve come from the standard web development paradigm. But even some experienced developers prefer them as templates can better seperate layout from functionality and give the option of using pre-processors like Pug.</p>
<p>But templates come at the cost of having to learn all the extended HTML syntax, while render functions only require knowledge of standard HTML and Javascript. Render functions also benefit from easier debugging and testing.</p>
<p>On this point, though, you can’t go wrong with Vue, as it’s introduced the option of using either templates or render functions in version 2.</p>
<p><strong>If you like simplicity and things that “just work”, go with Vue.</strong></p>
<p>A simple Vue project can be run directly from a browser with no need of transpilation. This allows Vue to be easily dropped into a project the way jQuery is.</p>
<p>While this is also technically possible with React, typical React code leans more heavily on JSX and on ES6 features like classes and non-mutating array methods.</p>
<p>But Vue’s simplicity runs more deeply in its design. Let’s compare how the two libraries handle application data (i.e. “state”).</p>
<p>State in React is immutable so you can’t directly change it. You need to use the setState API method:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(&#123; </div><div class="line">    <span class="attr">message</span>: <span class="keyword">this</span>.state.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Diff’ing the current and previous state is how React knows when and what to re-render in the DOM, hence the need for immutable state.<br>In contrast, data is just mutated in Vue. The same data property can be altered far less verbosely in Vue:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Note that data properties are available as properties of </span></div><div class="line"><span class="comment">// the Vue instance</span></div><div class="line"><span class="keyword">this</span>.message = <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</div></pre></td></tr></table></figure>
<p>Before you conclude that Vue’s rendering system must lack the efficiency of React’s, let’s examine how state in Vue is managed under the hood: when you add a new object to the state, Vue will walk through all of its properties and convert them to getter and setters. Vue’s reactivity system now keeps track of the state and will automatically re-render the DOM when it is mutated.</p>
<p>Impressively, altering state in Vue is not only more succinct, but its re-rendering system is actually faster and more efficient than React’s.</p>
<p>Vue’s reactivity system does have caveats, though. For example, it cannot detect property addition or deletion and certain array changes. These cases can be worked around with a React-like set method from the Vue API.</p>
<p><strong>If you need your application to be as small and fast as possible, go with Vue.</strong></p>
<p>Both React and Vue will build a virtual DOM and synchronise the real DOM when the app’s state changes. Both have their own means of optimising this process.</p>
<p>Vue core developers have offered a benchmark test that shows Vue’s rendering system to be faster than React’s. In this test a list of 10,000 items are rendered 100 times. The comparison is tabled below.</p>
<p><img src="http://ww3.sinaimg.cn/large/79be2309gw1fbkp019rknj20m808dglu.jpg" alt=""></p>
<blockquote>
<p>Benchmarks as published on vuejs.org</p>
</blockquote>
<p>From a pragmatic standpoint, this kind of benchmark is only relevant in edge cases. Most apps will not need to do this kind of operation routinely so it should generally not be considered an important point of comparison.</p>
<p>Page size, though, is relevant to all projects, and again Vue has the upper hand. Minified, the current release of the Vue library is only 25.6KB.</p>
<p>To get a similar set of functionality in React you need React DOM (37.4KB) and the React with Addons library (11.4KB), which totals 48.8KB, almost double the size of Vue. To be fair you will get a larger API with React, but you don’t get double as much functionality.</p>
<p><strong>If you plan to build a large scale app, go with React.</strong></p>
<p>A comparison of a simple app implemented in both Vue and React, like the one at the beginning of this article, may initially bias a developer to favour Vue. This is because template-based apps are easier to understand at first look, and quicker to get up and running with.</p>
<p>But these initial benefits introduce technical debt that can slow development of apps reaching a larger scale. Templates are prone to unnoticed runtime errors, are hard to test, and are not easy to restructure or decompose.</p>
<p>In contrast, Javascript-made templates can be organised into components with nicely decomposed and DRY code that is more reusable and testable.</p>
<p>Vue also has a component system and render functions. But React’s rendering system is more configurable and has features like shallow rendering that, combined with React’s testing utilities, allow for far more testable and maintainable code.</p>
<p>Meanwhile, React’s immutable application data may not be as succinct, but it shines in larger application when transparency and testability become critical.</p>
<p><strong>If you want a library that is adaptable for both web and native apps, go with React.</strong></p>
<p>React Native is a library for building native mobile applications with Javascript. It’s the same as React.js, only instead of using web components, it uses native components. If you’ve learnt React.js, you’ll very easily be able to pick up React Native, and vice versa.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// JS</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>; </div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;   </div><div class="line">  render() &#123;     </div><div class="line">    <span class="keyword">return</span> (       </div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span>         </span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, React Native!<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );   </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent(<span class="string">'HelloWorld'</span>, () =&gt; HelloWorld);</div></pre></td></tr></table></figure>
<p>The significance is that a developer can build an app on either the web or native mobile without requiring a different set of knowledge and tools. Learning React gives you a huge bang for you buck if you intend to develop for both web and mobile.</p>
<p>Alibaba’s Weex is another cross-platform UI project. Currently it considers Vue an “inspiration” and uses a lot of the same syntax, with plans to fully integrate Vue. However, the timeline and specifics of this integration are still unclear.</p>
<p>Since Vue has HTML templates as a core part of its design and does not have custom rendering as a current feature, it’s hard to see that a native counterpart for Vue.js in its current form will be as tight as what React.js and React Native are.</p>
<p><strong>If you want the biggest ecosystem, go with React.</strong></p>
<p>There’s no question that React is currently the more popular library with ~2.5M NPM downloads a month as opposed to Vue’s ~225K per month.</p>
<p><img src="http://ww1.sinaimg.cn/large/79be2309gw1fbkp01iettj20m8092mxp.jpg" alt=""></p>
<p>Popularity is not merely a shallow benefit. It means there are more articles, tutorials and Stack Overflow answers for help. It means there are more tools and add-ons to leverage in a project and save developers from building everything themselves.</p>
<p>Both libraries are open source, but React was born from Facebook and benefits from that patronage. Developers and companies committing to React can be assured of continued maintenance.</p>
<p>In contrast, Vue was created by a single developer, Evan You, and You is currently the only full time maintainer of Vue. Vue has some corporate sponsorship but not on the scale of Facebook or Google.</p>
<p>To the credit of the Vue team, its small size and independence has not materialised as a disadvantage. Vue has a regular release cycle and even more impressively, Vue has only 54 open issues on Github compared to 3456 closed issues, while React has a far larger 530 open issues compared to 3447 closed.</p>
<p><strong>If you’re already happy with one or the other, there’s no need to switch.</strong></p>
<p>To recap, our findings, Vue’s strengths are:</p>
<ul>
<li>Flexible options for template or render functions</li><li>Simplicity in syntax and project setup</li><li>Faster rendering and smaller size</li></ul>
<p>React’s strengths:</p>
<ul>
<li>Better at scale, studier and more testable</li><li>Web and native apps</li><li>Bigger ecosystem with more support and tools available</li></ul>
<p>However, both React and Vue are exceptional UI libraries and have more similarities than differences. Most of their best features are shared:</p>
<ul>
<li>Fast rendering with virtual DOM</li><li>Lightweight</li><li>Reactive components</li><li>Server-side rendering</li><li>Easy integration with router, bundler and state management</li><li>Great support and community</li></ul>
<p>If you think we’ve missed something we’d love to hear in the comments. Happy developing!</p>
<hr>
<p><em>About the authors</em></p>
<p>Anthony Gore</p>
<blockquote>
<p>I’m a Javascript developer and online course instructor. My latest course is Vue.js 2 Essentials: Build Your First Vue App, available on Udemy.</p>
</blockquote>
<p>Alexis Mangin</p>
<blockquote>
<p>Alexis helped me write this article with his exceptional knowledge of web development. You should follow him on Medium as he writes his own great tutorials on React.</p>
</blockquote>
<hr>
<p>Vue的作者<a href="https://medium.com/@youyuxi/pretty-good-comparison-overall-but-a-few-points-id-like-to-discuss-e4f6460e75d5#.mij64qy5y" target="_blank" rel="external">回复了该文</a>，摘录如下：<br>Pretty good comparison overall, but a few points I’d like to discuss:</p>
<blockquote>
<p>“Templates are prone to unnoticed runtime errors, are hard to test, and are not easy to restructure or decompose.”</p>
</blockquote>
<p>These arguments against templates are too broad. Templates are by definition statically analyzable (even more so than dynamic render functions) and Vue provides many compile-time AND runtime warnings for common template syntax errors, and can be further improved in the future. Also, since Vue templates compile into render functions under the hood, a template containing expression syntax errors will be detected at compile time instead of runtime (if you are using a build setup instead of in-browser compilation).</p>
<blockquote>
<p>“In contrast, Javascript-made templates can be organised into components with nicely decomposed and DRY code that is more reusable and testable.”</p>
</blockquote>
<p>Organizing your application as decoupled components has little to do with whether you are using templates or JSX, but more with how components are defined as a function of state and prop. In this sense, Vue components and React components are equivalent on the higher level and there’s nothing that makes a React component fundamentally more testable than a Vue component. You can do exactly the same thing with a Vue component: render the virtual DOM with different set of props and assert the output. Admittedly this is may not be very obvious for new users, but we are planning to provide official component testing utilities in the near future.</p>
<blockquote>
<p>“Meanwhile, React’s immutable application data may not be as succinct, but it shines in larger application when transparency and testability become critical.”</p>
</blockquote>
<p>This statement lacks the proper context of state management patterns used. In most cases, the built-in state management patterns provided by the frameworks themselves are insufficient for large scale apps, and a dedicated solution like Redux or Vuex must be used. It is very premature to declare that “If you plan to build a large scale app, go with React” without giving a proper discussion about the solutions designed to deal with large scale apps for both frameworks.</p>
<blockquote>
<p>Alibaba’s Weex is another cross-platform UI project. Currently it considers Vue an “inspiration” and uses a lot of the same syntax, with plans to fully integrate Vue. However, the timeline and specifics of this integration are still unclear.</p>
</blockquote>
<p>The <a href="https://github.com/weexteam/weex-vue-framework/issues/9" target="_blank" rel="external">roadmap</a> is publicly available. In the latest Weex release (0.9.4), Vue 2 is now already officially integrated as a runtime framework which allows the use of the majority of features found in Vue’s API (excluding those that are web-platform-specific). (<a href="https://github.com/alibaba/weex/tree/dev/examples/vue" target="_blank" rel="external">examples</a>)</p>
<blockquote>
<p>“Since Vue has HTML templates as a core part of its design and does not have custom rendering as a current feature, it’s hard to see that a native counterpart for Vue.js in its current form will be as tight as what React.js and React Native are.”</p>
</blockquote>
<p>This is factually wrong. Vue 2.x is designed to support <a href="https://github.com/vuejs/vue/tree/dev/src/platforms" target="_blank" rel="external">custom rendering targets</a> from the very beginning, it’s just not exposed via public APIs. Again, templates are compiled into Virtual DOM render functions which allows any type of lower-level customizations needed to adapt to native rendering targets.</p>
]]></content>
    
    <summary type="html">
    
      本文为英文文章《React or Vue: Which Javascript UI Library Should You Be Using?》的原文，并附带有作者介绍和Vue.js的作者的亲自回复。文章主要讲述了React和Vue之间的差异性。
    
    </summary>
    
      <category term="翻译" scheme="http://xovel.cn/categories/translate/"/>
    
    
      <category term="javascript" scheme="http://xovel.cn/tags/javascript/"/>
    
      <category term="react" scheme="http://xovel.cn/tags/react/"/>
    
      <category term="vue" scheme="http://xovel.cn/tags/vue/"/>
    
      <category term="ui" scheme="http://xovel.cn/tags/ui/"/>
    
      <category term="programming" scheme="http://xovel.cn/tags/programming/"/>
    
      <category term="web" scheme="http://xovel.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2016年总结</title>
    <link href="http://xovel.cn/article/summerize-for-2016.html"/>
    <id>http://xovel.cn/article/summerize-for-2016.html</id>
    <published>2016-12-31T13:01:29.000Z</published>
    <updated>2017-01-01T16:03:38.038Z</updated>
    
    <content type="html"><![CDATA[<p>转眼已经是2016年的最后一天了，是时候来好好做一个全面的总结了。</p>
<p>那么，直接进入主题吧！</p>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>年初，去往冷水滩的医院总部，参加了一个不大不小的会议，老板给大家讲述了宏大的愿景。那个时候的我依然是充满激情的，就如同此时此刻的我。2月份回到长沙后，因为各方面的原因，参与投资的项目的局势已然不容乐观。无论我怎么挣扎挽回，也无法避免项目的失败，期间的缘由这里就不详述了。</p>
<p>投资失利的我，于4月初正式离开了华懿集团。在4月中下旬，去往宇成集团上班。直到上个月18号，因不可抗力，被迫离开公司。休整了一段时间之后，目前在梅溪湖一家从事教育装备系统管理的公司上班，负责装备系统的前端建设。</p>
<p>9月22日前后，去深圳出差，这一次的出差很可能已经改变了我的人生轨迹，相关的记录本博客也有文章进行记录。</p>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>2016年，发生了很多有意思的事情。生活上，一切也变得越来越好。年初自己的茫然失措，到现如今的悠然自得，自己能够很清楚的感受到自己的变化。正如期望中的一样，努力变成一个内心波澜不惊的人将会是我长久的状态。</p>
<p>虽然投资失利带来的短期内的负面效应，给我造成了很多不好的影响。失败并不可怕，可怕的是没有面对失败的勇气和战胜挫折的魄力。</p>
<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>2016年技术栈的提升，没有以往的高。当然，一直以来都没有多少提升。</p>
<p>2016年主要攻坚的技术依然是前端WEB方面的，核心就是JS编程。</p>
<p>在宇成工作的期间，JS编程倒并没有进行多少，主要是一些HTML和CSS的编写。自己想要晋升的技术栈，诸如<code>React</code>、<code>Angular</code>等，也只是略识皮毛。不过相对之前在福建自己对这些方面的技术的认知，已经提升了不少层次。</p>
<p>对于JS的运用，可以说依然是有一个大幅度的提升，自己对命令行执行JS的理解，深入了不少，并且使用一款基于<code>Node.js</code>的博客构建工具<code>hexo</code>，搭建了个人博客。就是本博客。到目前为止，共计写博文47篇，不包含本篇。另有几个页面放置在特殊目录<code>花园/竹林</code>里面。</p>
<p>APP方面的学习，目前主要是WebApp的方式，也就是我目前做的前端方式。但这种技术方式，并不是我所赞同的方式。这个想法以后有机会再详表吧。</p>
<p>9月份，微信抛出了小程序的概念，当时的自己，及时跟进，熟悉了大部分微信小程序的文档。</p>
<h4 id="花园-竹林"><a href="#花园-竹林" class="headerlink" title="花园/竹林"></a><a href="http://xovel.cn/garden/">花园/竹林</a></h4><p>具体的链接就不贴了，可以自行查看。</p>
<ol>
<li>宇成朝阳广场页面</li><li>图片转Base64编码工具</li><li>风华60年投票活动分类入口</li><li>一个错视的旋转动画</li><li>一个自适应菜单导航页面</li><li>移动端下拉刷新操作</li><li>Less在线编写</li></ol>
<h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>2016年接手的项目不算太多。</p>
<p>除去去年年末给华懿集团重新架设的官网，其他外围的项目我并没有直接进行参与。在宇成集团负责的主要项目有两个，一个是<code>奢厨生鲜</code>，另一个的是<code>狂乐传媒</code>。两者均主要为移动端进行建设，所以在进行响应式设计的时候主要考虑主流手机的界面的前端展现。前后端分离的方式，给自己的工作带来了一定程度的改变。</p>
<h4 id="奢厨生鲜"><a href="#奢厨生鲜" class="headerlink" title="奢厨生鲜"></a>奢厨生鲜</h4><p>该项目为公司向互联网发展的核心项目之一，前端主程便是我，负责所有页面的静态实现，同时协作完成与后台数据的对接。</p>
<h4 id="狂乐传媒"><a href="#狂乐传媒" class="headerlink" title="狂乐传媒"></a>狂乐传媒</h4><p>该项目为公司向传媒进军的项目，当时并不是核心项目，所以我只负责了静态页面的实现。后来由于项目负责人的离开，此项目也就不了了之了。</p>
<blockquote>
<p>关于这两个项目更多的信息，鉴于职业操守和保密规则，如果有兴趣，可以单独与我沟通了解。</p>
</blockquote>
<h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>自己是一个比较喜欢阅读与写作的人，不过说来惭愧，在2016年，自己的阅读量并不是太多。在读书馆借了不少书，但能够通读的并不多。所以，这个数据就不做展现了。</p>
<h3 id="圣血记"><a href="#圣血记" class="headerlink" title="圣血记"></a>圣血记</h3><p>本来这一块的子标题应该是<strong>写作</strong>，但是关于博客的写作上面已经提及了，于是，关于写作方面，值得进行记录的就是<code>圣血记</code>了。</p>
<p>2016年，所创作的剧情隶属于《圣血记》第二部《寻玉》。今年发表的篇章共计26，其中《寻玉》21篇。</p>
<p>关于具体的剧情进展，这里不做展开了。要提一下的是今年的下半年，基本上没有进行新剧情的创作。</p>
<h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><p>已架设在<code>GitHub</code>上的开源项目：</p>
<h4 id="CanvasBubble"><a href="#CanvasBubble" class="headerlink" title="CanvasBubble"></a><a href="https://github.com/xovel/CanvasBubble" target="_blank" rel="external">CanvasBubble</a></h4><p>使用canvas实现的一个泡泡背景。</p>
<h4 id="Carousel3D"><a href="#Carousel3D" class="headerlink" title="Carousel3D"></a><a href="https://github.com/xovel/Carousel3D" target="_blank" rel="external">Carousel3D</a></h4><p>一款3D旋转效果的小工具。</p>
<h4 id="PullRefresh"><a href="#PullRefresh" class="headerlink" title="PullRefresh"></a><a href="https://github.com/xovel/PullRefresh" target="_blank" rel="external">PullRefresh</a></h4><p>JS实现的下拉刷新插件。</p>
<h4 id="octoverse"><a href="#octoverse" class="headerlink" title="octoverse"></a><a href="https://github.com/xovel/octoverse" target="_blank" rel="external">octoverse</a></h4><p>GitHub上的关于2016总结页面的离线版本。</p>
<hr>
<p>罢了，罢了，总结就这样吧。</p>
]]></content>
    
    <summary type="html">
    
      2016年年末大总结。
    
    </summary>
    
      <category term="生活" scheme="http://xovel.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="2016" scheme="http://xovel.cn/tags/2016/"/>
    
      <category term="2017" scheme="http://xovel.cn/tags/2017/"/>
    
      <category term="总结" scheme="http://xovel.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="经历" scheme="http://xovel.cn/tags/%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>一个JS对象操作上的小坑</title>
    <link href="http://xovel.cn/article/a-trap-about-object.html"/>
    <id>http://xovel.cn/article/a-trap-about-object.html</id>
    <published>2016-12-28T14:24:41.000Z</published>
    <updated>2016-12-28T14:58:33.199Z</updated>
    
    <content type="html"><![CDATA[<p>今天，工作上遇到一个很滑稽的问题。我大概描述一下，具体的源代码和项目详情这里就不详述了。</p>
<p>项目上使用到了一款插件叫做<code>jqGrid</code>，在使用这个插件进行表格数据载入的时候调用了一个名为<code>localData</code>的对象里面的一个列表——我们姑且称之为<code>localData.list</code>——里面的数据。在页面加载的时候这个表格就会被初始化。在点击某个按钮进行数据初始化的时候需要清空这个表格，于是我写下了一段<del>带有巨坑的</del>代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">localData = &#123;</div><div class="line">  <span class="attr">status</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">count</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">list</span>: []</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>出事了……</strong>，在后续进行数据添加之后（<code>localData.list.push</code>），进行表格的重载<code>.trigger(&quot;reloadGrid&quot;)</code>操作时，数据无法展现。</p>
<p>百思不得其解之下，询问同事，他们也表示曾经出现过类似的问题，但是后来不知道怎么搞的就没事了。我比对了一下他们的项目源码，发现他们是这样写数据清空操作的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">localData.status = <span class="number">0</span>;</div><div class="line">localData.count = <span class="number">0</span>;</div><div class="line">localData.list.length = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>喏，陷阱就埋在这里……</p>
<p>在使用诸如<code>a={}</code>的形式进行对象的初始化操作时，之前的信息将会全部丢失，即使被赋值之后的结构与之前的一模一样，之前的对象也<strong>跟这个毫无关系</strong>了。</p>
<p><del>其实我早就应该意识到这个陷阱的，因为：</del></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#125; === &#123;&#125;</div></pre></td></tr></table></figure>
<p>结果为<strong>false</strong></p>
<hr>
<p>总结：心要更细一些，基础得加强，赋值不要随意。</p>
<p>谨以此作文一篇，以儆效尤。本文完。</p>
]]></content>
    
    <summary type="html">
    
      所谓细节决定成败，本文讲述一个隐藏的比较深的陷阱，有关于JS对象操作，尤其是清空操作时候的坑，请注意防范。
    
    </summary>
    
      <category term="随笔" scheme="http://xovel.cn/categories/essay/"/>
    
    
      <category term="object" scheme="http://xovel.cn/tags/object/"/>
    
      <category term="js" scheme="http://xovel.cn/tags/js/"/>
    
      <category term="trap" scheme="http://xovel.cn/tags/trap/"/>
    
  </entry>
  
  <entry>
    <title>Jade入门级介绍</title>
    <link href="http://xovel.cn/article/introduction-to-jade.html"/>
    <id>http://xovel.cn/article/introduction-to-jade.html</id>
    <published>2016-12-18T15:16:51.000Z</published>
    <updated>2016-12-24T16:42:29.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>最近，到了新的公司上班，接触到的HTML编写方式为使用<code>jade</code>。<del>习惯了手写HTML硬编码的我，一时之间还不太适应这种快速高效的方式。</del></p>
<p>我们先通过一个例子来讲述一下这款工具的牛逼之处吧！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">div.container#main Content</div><div class="line">a.btn(href=&quot;javascript:;&quot;,title=&quot;link&quot;) Button</div></pre></td></tr></table></figure>
<p>经过工具编译后，以上代码将会输出：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">title</span>=<span class="string">"link"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><del>是不是有种简单粗暴的即视感？</del></p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>基本属性的写法如下：</p>
<p>每行开始的第一个单词将会作为HTML标签名，如果没有，则默认为<code>div</code>。</p>
<p>类名和ID，同CSS选择器的语法——类名为<code>.</code>号开始，如果有多个类名，叠加展示即可。如<code>section.index.tips</code>；ID为<code>#</code>标识。</p>
<p>HTML元素的其他属性可以写在跟在后面的括号<code>()</code>之内。多个属性，可以使用逗号<code>,</code>或者空格<code> </code>隔开。</p>
<p>元素内的文本则以一个空格后直接书写。</p>
<p>Jade采用对缩进敏感的语法，来划分HTML的层次结构。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ul</div><div class="line">  li A </div><div class="line">    span text</div><div class="line">  li B</div><div class="line">  li C</div></pre></td></tr></table></figure>
<p>将会被编译成：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>A<span class="tag">&lt;<span class="name">span</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Li</span>&gt;</span>C<span class="tag">&lt;/<span class="name">Li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><code>jade</code>支持循环。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- for (var i = 0; i &lt; 3; i++)</div><div class="line">  li item</div></pre></td></tr></table></figure></p>
<p>将会被编译成：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>item<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><code>jade</code>使用<code>extends</code>来继承代码片段，继承可以修改代码片段。</p>
<p>页面中使用<code>block</code>标识符，可以指定一个代码片段的名字，比如名字设为<code>name</code>。在需要使用该代码片段的地方，直接使用<code>block name</code>即可。</p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p><code>jade</code>可以使用<code>include</code>语法实现高度复用代码。将这些代码片段保存到不同的文件中，然后在需要的地方进行引入即可。</p>
<h3 id="混合宏"><a href="#混合宏" class="headerlink" title="混合宏"></a>混合宏</h3><p><code>mixin</code>是<code>jade</code>提供的另一个方法，可以很大程度提升HTML编写的效率。语法类似于<code>sass</code>和<code>less</code>中的混合宏。</p>
<p>混合宏具有高度复用、解耦、可读、可扩、可维护等特点，是众多预编译语言的共同特点。</p>
<p><code>jade</code>中使用<code>mixin</code>标识符进行混合宏的创建，在需要的地方使用<code>+</code>标识符进行调用即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mixin list</div><div class="line">  ul</div><div class="line">    li foo</div><div class="line">    li bar</div><div class="line">    li baz</div><div class="line"></div><div class="line">+list</div><div class="line">+list</div></pre></td></tr></table></figure>
<p>将会被编译成：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>baz<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>baz<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>支持参数的传入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mixin card(name)</div><div class="line">  li.card= name</div><div class="line">ul</div><div class="line">  +card(&apos;A&apos;)</div><div class="line">  +card(&apos;B&apos;)</div><div class="line">  +card(&apos;C&apos;)</div></pre></td></tr></table></figure></p>
<p>将会被编译成：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>还可以使用余参：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mixin list(id, ...items)</div><div class="line">  ul(id=id)</div><div class="line">    each item in items</div><div class="line">      li= item</div><div class="line"></div><div class="line">+list(&apos;example&apos;, 1, 2, 3, 4, 5)</div></pre></td></tr></table></figure></p>
<p>将会被编译成：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<p><code>jade</code>的入门级介绍到这里就告一段落，还有一些高级语法，可以参考官方文档。</p>
]]></content>
    
    <summary type="html">
    
      有一种速写HTML代码的方法，叫做jade，通过严格缩进来控制HTML的层次与顺序。本文针对这个方案做一个简略的说明。
    
    </summary>
    
      <category term="开发" scheme="http://xovel.cn/categories/dev/"/>
    
      <category term="文档" scheme="http://xovel.cn/categories/dev/docs/"/>
    
    
      <category term="jade" scheme="http://xovel.cn/tags/jade/"/>
    
      <category term="入门" scheme="http://xovel.cn/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="HTML" scheme="http://xovel.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Foxmail接收密码错误的处理</title>
    <link href="http://xovel.cn/article/fix-foxmail-receive-password-error.html"/>
    <id>http://xovel.cn/article/fix-foxmail-receive-password-error.html</id>
    <published>2016-12-10T07:43:49.000Z</published>
    <updated>2016-12-10T08:22:00.766Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用Foxmail邮箱的时候出现了一个问题，在接收邮件的时候会弹出一个提示框，说密码错误。</p>
<a id="more"></a>
<p><img src="http://ww3.sinaimg.cn/large/79be2309gw1falr9xhz16j20du09qglx.jpg" alt=""></p>
<p><del>一开始我还真以为是密码错误了，</del>修改了密码，再去登录，依然有这个提示。</p>
<p>打开搜索引擎搜了一下，发现有这个问题的人并不是只有我一个，看了几篇文章之后发现，竟然是跟一个叫<code>IMAP</code>的东西有关的。</p>
<blockquote>
<p><code>IMAP</code>，即<strong>I</strong>nternet <strong>M</strong>essage <strong>A</strong>ccess <strong>P</strong>rotocol（互联网邮件访问协议），您可以通过这种协议从邮件服务器上获取邮件的信息、下载邮件等。IMAP与POP类似，都是一种邮件获取协议。</p>
</blockquote>
<p>参考信息来自于：<a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=331" target="_blank" rel="external">QQ邮箱帮助中心</a></p>
<p>不管它的目的是什么，总归是为了安全方面的问题，必须要支持。</p>
<blockquote>
<p>其实在弹出的提示框中有链接，里面就是解决办法，我是舍近求远了。<a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=1001256" target="_blank" rel="external">什么是授权码，它又是如何设置？_QQ邮箱帮助中心</a></p>
</blockquote>
<p>那么，问题出现了应该怎么去解决呢？</p>
<p>设置这个密码并填写进那个提示框即可，详细步骤如下：</p>
<blockquote>
<p>我用的是QQ邮箱，这里演示以这个为准，其他邮箱的操作应该是类似的。</p>
</blockquote>
<p>首先，登录网页版邮箱，在<strong>帐户设置</strong>相关的页面中，找到<code>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</code>一项，如图：</p>
<p><img src="http://ww2.sinaimg.cn/large/79be2309gw1falr9xzlk5j20qk092aas.jpg" alt=""></p>
<p>开启<code>IMAP/SMTP服务</code>，会要求一个验证：</p>
<p><img src="http://ww4.sinaimg.cn/large/79be2309gw1falr9ygetoj20f70adaa6.jpg" alt=""></p>
<p>验证一下即可，验证通过后会给出一个验证码：</p>
<p><img src="http://ww1.sinaimg.cn/large/79be2309gw1falr9ygsi5j20hv0baq3c.jpg" alt=""></p>
<p>将这个验证码输入到Foxmail弹出的那个提示对话框中，确认即可。</p>
<p><img src="http://ww3.sinaimg.cn/large/79be2309gw1falr9yygc1j20g506taa2.jpg" alt=""></p>
<p>关于<code>IMAP</code>和<code>POP3</code>的区别，在<a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=331" target="_blank" rel="external">QQ邮箱的帮助文档</a>中有详细介绍，这里就不赘述了。</p>
<hr>
<blockquote>
<ol>
<li>截图看起来有点不对劲，可能是<code>win10</code>系统的缘故吧。</li><li>Foxmail的那张截图，中间有乱码，应该是系统编码冲突的原因，暂时不去深究了。</li></ol>
</blockquote>
<hr>
<p>本文完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用Foxmail邮箱的时候出现了一个问题，在接收邮件的时候会弹出一个提示框，说密码错误。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://xovel.cn/categories/essay/"/>
    
    
      <category term="foxmail" scheme="http://xovel.cn/tags/foxmail/"/>
    
      <category term="接收密码" scheme="http://xovel.cn/tags/%E6%8E%A5%E6%94%B6%E5%AF%86%E7%A0%81/"/>
    
      <category term="邮箱" scheme="http://xovel.cn/tags/%E9%82%AE%E7%AE%B1/"/>
    
      <category term="SMTP" scheme="http://xovel.cn/tags/SMTP/"/>
    
      <category term="IMAP" scheme="http://xovel.cn/tags/IMAP/"/>
    
      <category term="授权码" scheme="http://xovel.cn/tags/%E6%8E%88%E6%9D%83%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>博客优化之压缩HTML静态文件</title>
    <link href="http://xovel.cn/article/minify-static-html-files.html"/>
    <id>http://xovel.cn/article/minify-static-html-files.html</id>
    <published>2016-11-16T09:07:40.000Z</published>
    <updated>2016-11-18T07:00:40.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文来自博客issue<a href="https://github.com/xovel/xovel.github.io/issues/16" target="_blank" rel="external">#16</a></p>
</blockquote>
<p>使用了<code>next</code>主题之后，默认生成的HTML文件中，会出现大量的空行。直接查看网页源代码就能够看到。</p>
<p><code>hexo</code>默认没有提供压缩HTML/CSS/JS的功能，但我们可以通过另外的途径进行代码的压缩。</p>
<blockquote>
<p>之前的版本，有一个名为<code>hexo-generator-minify</code>的插件，但已经无人维护，不支持hexo 3.x版本。</p>
<p><a href="https://hexo.io/plugins/" target="_blank" rel="external">官方插件库</a>能搜到的压缩插件，均有不同程度的问题。详情这里不表，具体诸君可以自行安装测试。</p>
</blockquote>
<p>这里介绍一种<a href="https://github.com/gulpjs/gulp" target="_blank" rel="external"><code>gulp</code></a>自动化任务压缩的方式来处理这个问题，缺陷就是每一次blog在deploy的时候都需要事先执行一次这个压缩任务。</p>
<blockquote>
<p>本人的博客曾经开启过压缩功能，但后来放弃了。<del>一方面是嫌麻烦，一方面也是觉得暂时没有这个必要</del></p>
</blockquote>
<p>本人采用的具体压缩工具为：</p>
<ul>
<li><a href="https://github.com/jonschlinkert/gulp-htmlmin" target="_blank" rel="external">gulp-htmlmin</a>，该插件对HTML代码进行压缩。</li><li><a href="https://github.com/anseki/gulp-htmlclean" target="_blank" rel="external">gulp-htmlclean</a>，该插件对HTML进行代码清理，去除不必要的空行等。</li><li><a href="https://github.com/scniro/gulp-clean-css" target="_blank" rel="external">gulp-clean-css</a>，该插件对CSS代码进行压缩与清理。</li></ul>
<p>另外有一个图片压缩工具，暂未使用：<a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="external">gulp-imagemin</a></p>
<p>JS压缩工具可以参考：<a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a>、<a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">UglifyJS2</a>。</p>
<p>引入各种插件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</div><div class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>);</div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div></pre></td></tr></table></figure></p>
<p>本人采用的核心的任务代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</div><div class="line">    .pipe(htmlclean())</div><div class="line">    .pipe(htmlmin(&#123;</div><div class="line">         <span class="attr">removeComments</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">minifyJS</span>: <span class="literal">false</span>,</div><div class="line">         <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</div><div class="line">         <span class="attr">minifyURLs</span>: <span class="literal">false</span>,</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>那么，在每一次deploy之前，在<code>Git Bash</code>下执行一次<code>gulp minify-html</code>即可对所有的HTML代码进行压缩。</p>
<p>CSS和JS的压缩可以编写类似的代码，这里不再赘述。</p>
]]></content>
    
    <summary type="html">
    
      博客优化之压缩HTML静态文件，本文介绍一种使用gulp的处理方式来解决这个问题。
    
    </summary>
    
      <category term="开发" scheme="http://xovel.cn/categories/dev/"/>
    
    
      <category term="blog" scheme="http://xovel.cn/tags/blog/"/>
    
      <category term="优化" scheme="http://xovel.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="gulp" scheme="http://xovel.cn/tags/gulp/"/>
    
      <category term="minify" scheme="http://xovel.cn/tags/minify/"/>
    
  </entry>
  
  <entry>
    <title>双十一小记</title>
    <link href="http://xovel.cn/article/double-eleven-an-ironic-day.html"/>
    <id>http://xovel.cn/article/double-eleven-an-ironic-day.html</id>
    <published>2016-11-11T06:39:56.000Z</published>
    <updated>2016-11-18T07:00:40.177Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年剁手时节，今年的双十一，我没有打算花费过多费用在购物上面，毕竟有些东西还是实体店购买来的更加方便可靠。</p>
<p>众所周知，眼下的双十一是一个电商狂欢节，起初，它的目的并不像现在这般，只是为了倾销堆积商品。</p>
<blockquote>
<p>后来，淘宝和天猫积压的商品在双十一之后仍旧过多，唯品会借助这个机会，弯道超车，另辟蹊径，成为了另一个大的电商平台。</p>
</blockquote>
<p>淘宝和天猫在双十一峰值的时候会达到十多万每秒的高并发请求数量（2015年的数据），这无疑是一个巨大的挑战。在今年这个数据可能会更高，据相关推算，今年的峰值并发量将会达到百万级。</p>
<p>那么，在应对如此巨大的并发请求的时候，通常采用的方式是什么呢？</p>
<p>应对高并发，有两个很重要的概念：缓存与异步。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存，即<code>cache</code>，应对高并发场景，可以在用户行为的所有环节上添加一个合理的缓存操作。首先对浏览器端进行Cache设置，设置合理的过期规则，配合CDN，让部分元素直接从浏览器的Cache获取，有效降低服务器的访问压力。</p>
<p>业务层表现方式为动态和静态，大部分资源可以使用静态CDN的方式进行加速获取并展示。添加CDN Cache，可以大幅提升访问速度，同时降低后端实际负载。</p>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>使用非阻塞模式，也可以快速提升访问速度。异步化队列通过队列将请求或事务置入后台运行，从而使得同步阻塞模式变为异步非阻塞模式。</p>
<p>比如，多个用户在抢购同一个商品时，会同时调用支付借口，同步阻塞模式的情形下，用户过多时，支付数据库的压力会非常大，可能会引起数据库服务器宕机。</p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>在处理商品展示和购买操作的时候选用了分布式数据库解决方案。据悉，天猫淘宝采用的交易库应该是<code>OceanBase</code>，为了保持数据一致性，采用了<code>Paxos</code>协议。具体可以参考知乎上面的这个回答：<a href="https://www.zhihu.com/question/37421030/answer/72860789" target="_blank" rel="external">天猫双十一是怎么保证高并发、分布式系统中，数据一致性的？</a></p>
<hr>
<p><del>有点偏离主题思路了，这篇文章就先写到这里吧</del></p>
<p>下面是一些参考：</p>
<ul>
<li><a href="http://kb.cnblogs.com/page/508432/" target="_blank" rel="external">逃不掉的双十一 可怕的分布式架构隐患</a></li><li><a href="http://cbinews.baijia.baidu.com/article/247864" target="_blank" rel="external">技术大揭秘：阿里双11“逆天”记录是如何做到的？</a></li><li><a href="http://geek.csdn.net/news/detail/74130" target="_blank" rel="external">电商系统的高并发设计和挑战</a></li></ul>
<blockquote>
<p>2016年，双十一，天猫的交易额达到了1207亿。<del>可怕！</del></p>
</blockquote>
<p>所以，本文的标题英文为<code>an ironic day</code>。</p>
]]></content>
    
    <summary type="html">
    
      今天是双十一，这只是一篇随笔。稍微讲一下大量并发请求出现的时候相应的解决方案。
    
    </summary>
    
      <category term="开发" scheme="http://xovel.cn/categories/dev/"/>
    
    
      <category term="并发" scheme="http://xovel.cn/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="双十一" scheme="http://xovel.cn/tags/%E5%8F%8C%E5%8D%81%E4%B8%80/"/>
    
      <category term="服务器" scheme="http://xovel.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="分布式" scheme="http://xovel.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>《杜月笙全传》读后感</title>
    <link href="http://xovel.cn/article/book-review-about-the-bio-of-du-yue-sheng.html"/>
    <id>http://xovel.cn/article/book-review-about-the-bio-of-du-yue-sheng.html</id>
    <published>2016-11-07T07:54:08.000Z</published>
    <updated>2016-11-18T07:00:40.177Z</updated>
    
    <content type="html"><![CDATA[<p>上个月，同学推荐了我一本书，叫做《杜月笙全传》，杜海龙编著的版本。来长沙这么久了，其实也很少阅读人物传记之类的文章，原本没有打算通读一遍的。突然想起之前看过一个电视剧，叫做《北平无战事》，里面有个神秘人物叫做戴笠，印象中杜月笙这个人物跟戴笠有着非同一般的关系，就想着不妨读一遍这本书籍吧。</p>
<a id="more"></a>
<p><img src="http://ww1.sinaimg.cn/large/79be2309gw1f9ltg6d1bfj20gu0fwmxw.jpg" alt="杜月笙全传"></p>
<p>陆陆续续的，花了一个月左右的时间把这本书阅读完毕，速度放得很慢，没有采用快速阅读的方式。对于民国时期这个上海滩的风云人物，我内心深处其实也是有着某种崇敬之情的。</p>
<p>那么，本文将对这本书以及对杜月笙这个人物发表一下个人的看法。</p>
<p>清朝末年，社会动荡不安，大部分人都过着贫苦艰辛的日子。这其中也包括出身不是很好的杜月笙。关于杜月笙的个人介绍，这里也只给一个简单的介绍吧。</p>
<blockquote>
<p>杜月笙，原名杜月生，后改名为杜镛，号月笙，取“西方之乐为镛，东方之乐为笙”之意，由大学者章太炎建议。是近代中国尤其是上海滩的一个风云人物，由一个籍籍无名的孤苦无依的少年逐渐成长为叱咤上海滩的大亨、闻人。在抗日战争中沉着应对大局，具有强烈的民族意识，善于处理各种复杂的人际关系，为他的人生经历添加了不少传奇的色彩。</p>
</blockquote>
<p>在读完本书之后，我不禁沉思，这样的一个风云人物的人生经历，能带给我们什么样的启发呢？</p>
<p>故事从杜月笙小时候说起吧。在很小的时候，杜月笙的家庭就遭遇变故，年幼的他只能寄居在娘舅家里，受了不少苦。周围的亲戚也只有一个奶奶稍微能待见一下他，或许也正是因为这样一个原因，给杜月笙练就了一身求生的本领。他辞别亲故，只身一人来到上海滩闯荡。</p>
<p>起初，事情进展的很不顺利，也遭受了不少白眼。好在杜月笙重情重义，结交了一帮肝胆相照的好友。这也为后来杜月笙的发迹奠定了良好的基础，正所谓一个好汉三个帮，出门靠朋友。不过，年轻时候的他，沉迷赌色，不可自拔。整天流连与赌场与妓院，这个也映射出了当时的社会情形，是非常纷乱复杂的。</p>
<p>入青帮之后的他，开始调整自己的人生道路，戒除了烟瘾，攀附黄金荣，逐渐扩展自己的势力。因烟土生意来钱快，便组建了小八股，成立了公司专门运作烟土买卖。</p>
<p>回望杜月笙的传奇经历，不难发现，其在上海滩能跻身闻人大亨之列，人际关系的处理环节起到了很重要的作用。在组建烟土公司之前，杜月笙有一个外号叫做“水果月笙”，因其在朋友的一家水果商行里面上班，其为朋友两肋插刀的性格，赢得了周边许多人的信赖。在这期间杜月笙也逐渐变成了一个通达人情世故的人。富有商业头脑的他迅速在黄浦江崛起，挺进社会高层建筑之中。</p>
<p>在成为了上海滩知名的闻人大亨之后，纵横捭阖之下，在社会各个阶层之间斡旋，处理事情得心应手，获得了“闲话一句”的诨号，众人也视他为青帮的龙头老大。杜月笙后来进军实业，由纺织厂入手，逐渐扩展自己的业务。在金融界打出一片天地的同时，杜月笙也向文化界和娱乐界涉足。</p>
<p>抗战爆发之后，杜月笙的民族大义得到了一定程度的体现，他积极筹备抗日，为抗战做出了很大的贡献。只不过由于各种原因，早年的时候组织四大金刚残害共产党人士汪寿华，致其命丧枫林，这件事情也成为了杜月笙一生难以抹去的污点。</p>
<p>抗日战争结束后，曾经在香港和重庆两地辗转盘旋的杜月笙选择了继续留在香港，最终魂断香江，留下了不少遗憾的同时也结束了其传奇的一生。</p>
<p>读完《杜月笙全传》这本书之后，我一直在思考，是什么样的时势造就了杜月笙这样一个风云人物呢？当时的社会现实纷乱不堪，每个人都为了生存做出了特殊的选择，杜月笙也只是命运洪流中的一员，只不过他依靠自身的特点，广交宾客，循序渐进，慢慢的成为响当当的人物。</p>
<p>这里，我不会对这个人物的政治取向做出什么评价，一方面这个不太符合本博客建设的目的，另一方面也保留一下自己对政治方面的看法。这篇读后感着重评述杜月笙的人生经历以及给我所带来的感悟。</p>
<p>一直不知道什么样的文字才算是一种中规中矩的读后感，也不想按部就班式的写类似八股文的文章，这里就简单罗列一下自己读完这本书之后的一些主要观点吧，当作是一个总结：</p>
<ol>
<li>杜月笙人情事故练达，是其成为一个名动上海滩的大亨的一个必要条件。</li><li>任何人，任何事，都不要试图强行改变。</li><li>处理事情的方法多种多样，不能一意孤行，要善于听取他人的意见。</li><li>跟上一条有点矛盾的观点就是做事情还需要一些自己的果敢，要富有自信。</li></ol>
<p>读到后面，我的阅读速度放的很快，后面一大半的文字是在最后一周之内看完的，文字描述的场景看起来也的确令人血脉贲张。尤其是处理自己的儿子在抗战之后被抓入狱的事情，出乎蒋氏集团的意料之外的是，杜月笙并没有委曲求全，而是直接将孔祥熙公司下的黑幕抖了出来。这不得不令人佩服杜月笙的沉着冷静与过人的胆识了，敢直接与统治阶层正面对决。之后蒋经国也只好将杜月笙的儿子无罪开释。</p>
<p>在香港的最后一段时间，得知自己时日无多的时候，便开始立下遗嘱，安排自己的后事。从这些安排后事的环节中，也能够看到杜月笙有条不紊，处事不慌不乱的特点。在读到其在清算家产之后竟然只有区区十几万美元的时候，我也不禁唏嘘，堂堂一个叱咤上海滩的枭雄，能够分配给自己的妻子和孩子的家产只有这么一丁点。或许也正是因为他这样的一个出手阔绰，不计回报的做事方式，才有那么多愿意死心塌地为他卖命的人吧。</p>
<hr>
<p>行文到此，也算是对这本书的读后感有了一个大概的说法了吧。那么，其他方面的感悟就不多写了。最后说一下自己印象比较深刻的场景吧：</p>
<p>杜月笙曾经得过一场大病，其肝胆相照的朋友不离不弃的照顾了许久，后来其老家的亲戚也赶来照顾，忙前忙后的持续了几个月，将杜月笙从死神手中拉了回来。</p>
<p>年少时，杜月笙离开娘舅家里时，说过一番话，大意是日后混出模样来，必定重设祖祠，让家门风光。果不其然，后来杜月笙开设宗祠，其场面宏大无比，甚至请到了众多名伶包括梅兰芳前来助兴，那个时候，是何等的风光！</p>
<p>与张啸林反目之前，杜月笙还特意为了阻止其成为日本的走狗下了不少苦心，只是奈何张啸林冥顽不灵，不听劝告，也给自己埋下了恶名。作为兄弟，杜月笙对张啸林可谓是仁至义尽，只可惜命运弄人，很多事情杜月笙自己也是无能为力了。</p>
<p>作为提拔杜月笙的人，而且还是一个女人——黄金荣的发妻林桂生，不得不令人感慨，自古红颜多薄命。</p>
<hr>
<p>本文完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个月，同学推荐了我一本书，叫做《杜月笙全传》，杜海龙编著的版本。来长沙这么久了，其实也很少阅读人物传记之类的文章，原本没有打算通读一遍的。突然想起之前看过一个电视剧，叫做《北平无战事》，里面有个神秘人物叫做戴笠，印象中杜月笙这个人物跟戴笠有着非同一般的关系，就想着不妨读一遍这本书籍吧。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://xovel.cn/categories/essay/"/>
    
    
      <category term="读后感" scheme="http://xovel.cn/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="杜月笙" scheme="http://xovel.cn/tags/%E6%9D%9C%E6%9C%88%E7%AC%99/"/>
    
  </entry>
  
  <entry>
    <title>MathJax进阶</title>
    <link href="http://xovel.cn/article/mathjax-advanced.html"/>
    <id>http://xovel.cn/article/mathjax-advanced.html</id>
    <published>2016-11-03T06:57:41.000Z</published>
    <updated>2016-11-18T07:00:40.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前的文章：<a href="/article/mathjax-basic-tutorial-and-quick-reference.html">MathJax基础教程与快速参考</a>，本篇文章将对进阶的MathJax语法做一个简单的介绍。大部分内容来自于<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax basic tutorial and quick reference</a>一文中后面的评论。</p>
</blockquote>
<h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>MathJax提供了良好的矩阵支持。矩阵的语法为：<code>$$\begin{matrix}…\end{matrix}$$</code>，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">        \begin&#123;matrix&#125;</div><div class="line">        1 &amp; x &amp; x^2 \\</div><div class="line">        1 &amp; y &amp; y^2 \\</div><div class="line">        1 &amp; z &amp; z^2 \\</div><div class="line">        \end&#123;matrix&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>
<p>$$<br>\begin{matrix}<br>        1 &amp; x &amp; x^2 \\<br>        1 &amp; y &amp; y^2 \\<br>        1 &amp; z &amp; z^2 \\<br>        \end{matrix}<br>$$</p>
<p>关于添加括号，除了在基础教程中提到的<code>\left…\right</code>方法，还可以使用指定字符串替换上面提到的语法中的<code>matrix</code>即可：</p>
<ul>
<li><code>pmatrix</code>，$\begin{pmatrix}1&amp;2\\3&amp;4\\ \end{pmatrix}$</li><li><code>bmatrix</code>，$\begin{bmatrix}1&amp;2\\3&amp;4\\ \end{bmatrix}$</li><li><code>Bmatrix</code>，$\begin{Bmatrix}1&amp;2\\3&amp;4\\ \end{Bmatrix}$</li><li><code>vmatrix</code>，$\begin{vmatrix}1&amp;2\\3&amp;4\\ \end{vmatrix}$</li><li><code>Vmatrix</code>，$\begin{Vmatrix}1&amp;2\\3&amp;4\\ \end{Vmatrix}$</li></ul>
<p>在矩阵中可以添加点号<code>\cdots</code>$\cdots$、<code>\ddots</code>$\ddots$、<code>\vdots</code>$\vdots$来表示省略的部分：</p>
<p>$$<br>\begin{pmatrix}<br>     1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \\<br>     1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \\<br>     \vdots  &amp; \vdots&amp; \vdots &amp; \ddots &amp; \vdots \\<br>     1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n<br>     \end{pmatrix}<br>$$</p>
<p>增广矩阵则使用格式化的表格：</p>
<p>$$<br>\left[\begin{array}{cc|c}<br>  1&amp;2&amp;3\\<br>  4&amp;5&amp;6<br>  \end{array}\right]<br>$$</p>
<p>上面的矩阵的具体代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$$ \left[</div><div class="line">    \begin&#123;array&#125;&#123;cc|c&#125;</div><div class="line">      1&amp;2&amp;3\\</div><div class="line">      4&amp;5&amp;6</div><div class="line">    \end&#123;array&#125;</div><div class="line">\right] $$</div></pre></td></tr></table></figure>
<p>小型行内矩阵的表示方法为<code>\bigl(\begin{smallmatrix} ... \end{smallmatrix}\bigr)</code>。例如$\bigl( \begin{smallmatrix} a &amp; b \\ c &amp; d \end{smallmatrix} \bigr)$的代码为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$\bigl( \begin&#123;smallmatrix&#125; a &amp; b \\ c &amp; d \end&#123;smallmatrix&#125; \bigr)$</div></pre></td></tr></table></figure>
<h3 id="对齐的方程式"><a href="#对齐的方程式" class="headerlink" title="对齐的方程式"></a>对齐的方程式</h3><p>很多时候，我们想让方程式对齐以显得更加整齐美观。为了达到这样的目的，我们采用语法<code>\begin{align}…\end{align}</code>并且在每个换行符<code>\\</code>之后，添加一个连接符<code>&amp;</code>即可。</p>
<p>举个例子：</p>
<p>$$<br>\begin{align}<br>\sqrt{37} &amp; = \sqrt{\frac{73^2-1}{12^2}} \\<br> &amp; = \sqrt{\frac{73^2}{12^2}\cdot\frac{73^2-1}{73^2}} \\<br> &amp; = \sqrt{\frac{73^2}{12^2}}\sqrt{\frac{73^2-1}{73^2}} \\<br> &amp; = \frac{73}{12}\sqrt{1 - \frac{1}{73^2}} \\<br> &amp; \approx \frac{73}{12}\left(1 - \frac{1}{2\cdot73^2}\right)<br>\end{align}<br>$$</p>
<p>以上方程式的代码为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">\begin&#123;align&#125;</div><div class="line">\sqrt&#123;37&#125; &amp; = \sqrt&#123;\frac&#123;73^2-1&#125;&#123;12^2&#125;&#125; \\</div><div class="line"> &amp; = \sqrt&#123;\frac&#123;73^2&#125;&#123;12^2&#125;\cdot\frac&#123;73^2-1&#125;&#123;73^2&#125;&#125; \\ </div><div class="line"> &amp; = \sqrt&#123;\frac&#123;73^2&#125;&#123;12^2&#125;&#125;\sqrt&#123;\frac&#123;73^2-1&#125;&#123;73^2&#125;&#125; \\</div><div class="line"> &amp; = \frac&#123;73&#125;&#123;12&#125;\sqrt&#123;1 - \frac&#123;1&#125;&#123;73^2&#125;&#125; \\ </div><div class="line"> &amp; \approx \frac&#123;73&#125;&#123;12&#125;\left(1 - \frac&#123;1&#125;&#123;2\cdot73^2&#125;\right)</div><div class="line">\end&#123;align&#125;</div></pre></td></tr></table></figure>
<h3 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h3><p>分段函数使用的语法为：<code>\begin{cases}…\end{cases}</code>，在带有换行符<code>\\</code>的一行中，在分段处加入连接符<code>&amp;</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f(n) =</div><div class="line">\begin&#123;cases&#125;</div><div class="line">n/2,  &amp; \text&#123;if $n$ is even&#125; \\</div><div class="line">3n+1, &amp; \text&#123;if $n$ is odd&#125;</div><div class="line">\end&#123;cases&#125;</div></pre></td></tr></table></figure>
<p>展示为：</p>
<p>$$<br>f(n) =<br>\begin{cases}<br>n/2,  &amp; \text{if $n$ is even} \\<br>3n+1, &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$</p>
<p>也可以将括号放在右边：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">\left.</div><div class="line">\begin&#123;array&#125;&#123;l&#125;</div><div class="line">\text&#123;if $n$ is even:&#125;&amp;n/2\\</div><div class="line">\text&#123;if $n$ is odd:&#125;&amp;3n+1</div><div class="line">\end&#123;array&#125;</div><div class="line">\right\&#125;</div><div class="line">=f(n)</div></pre></td></tr></table></figure>
<p>$$<br>\left.<br>\begin{array}{l}<br>\text{if $n$ is even:}&amp;n/2\\<br>\text{if $n$ is odd:}&amp;3n+1<br>\end{array}<br>\right\}<br>=f(n)<br>$$</p>
<p>要使得分段函数中间的空隙更大，可以使用<code>\\[2ex]</code>替换<code>\\</code>，如要得到：</p>
<p>$$<br>f(n) =<br>\begin{cases}<br>\frac{n}{2},  &amp; \text{if $n$ is even} \\[2ex]<br>3n+1, &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$</p>
<p>使用以下代码即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f(n) =</div><div class="line">\begin&#123;cases&#125;</div><div class="line">\frac&#123;n&#125;&#123;2&#125;,  &amp; \text&#123;if $n$ is even&#125; \\[2ex]</div><div class="line">3n+1, &amp; \text&#123;if $n$ is odd&#125;</div><div class="line">\end&#123;cases&#125;</div></pre></td></tr></table></figure>
<h3 id="数组表格化"><a href="#数组表格化" class="headerlink" title="数组表格化"></a>数组表格化</h3><p>先看一个例子：</p>
<p>$$<br>\begin{array}{c|lcr}<br>n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\<br>\hline<br>1 &amp; 0.24 &amp; 1 &amp; 125 \\<br>2 &amp; -1 &amp; 189 &amp; -8 \\<br>3 &amp; -20 &amp; 2000 &amp; 1+10i<br>\end{array}<br>$$</p>
<p>其代码为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">\begin&#123;array&#125;&#123;c|lcr&#125;</div><div class="line">n &amp; \text&#123;Left&#125; &amp; \text&#123;Center&#125; &amp; \text&#123;Right&#125; \\</div><div class="line">\hline</div><div class="line">1 &amp; 0.24 &amp; 1 &amp; 125 \\</div><div class="line">2 &amp; -1 &amp; 189 &amp; -8 \\</div><div class="line">3 &amp; -20 &amp; 2000 &amp; 1+10i</div><div class="line">\end&#123;array&#125;</div></pre></td></tr></table></figure>
<p>在上面的矩阵中，提到了格式化表格的方式。格式化代码<code>\begin{array}{c|lcr}</code>中<code>c</code>表示居中对齐，<code>l</code>表示左对齐，<code>r</code>表示右对齐。<code>\hline</code>表示横向的水平线。</p>
<p>格式化的数组可以嵌套：</p>
<p>$$<br>\begin{array}{c}<br>\begin{array}{cc}<br>\begin{array}{c|cccc}<br>\text{min} &amp; 0 &amp; 1 &amp; 2 &amp; 3\\<br>\hline<br>0 &amp; 0 &amp; 0 &amp; 0 &amp; 0\\<br>1 &amp; 0 &amp; 1 &amp; 1 &amp; 1\\<br>2 &amp; 0 &amp; 1 &amp; 2 &amp; 2\\<br>3 &amp; 0 &amp; 1 &amp; 2 &amp; 3<br>\end{array}<br>&amp;<br>\begin{array}{c|cccc}<br>\text{max}&amp;0&amp;1&amp;2&amp;3\\<br>\hline<br>0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\<br>1 &amp; 1 &amp; 1 &amp; 2 &amp; 3\\<br>2 &amp; 2 &amp; 2 &amp; 2 &amp; 3\\<br>3 &amp; 3 &amp; 3 &amp; 3 &amp; 3<br>\end{array}<br>\end{array}<br>\\<br>\begin{array}{c|cccc}<br>\Delta&amp;0&amp;1&amp;2&amp;3\\<br>\hline<br>0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\<br>1 &amp; 1 &amp; 0 &amp; 1 &amp; 2\\<br>2 &amp; 2 &amp; 1 &amp; 0 &amp; 1\\<br>3 &amp; 3 &amp; 2 &amp; 1 &amp; 0<br>\end{array}<br>\end{array}<br>$$</p>
<p>以上代码省略。</p>
<h3 id="带颜色的文本"><a href="#带颜色的文本" class="headerlink" title="带颜色的文本"></a>带颜色的文本</h3><p>MathJax支持HTML颜色代码来对文本进行染色显示。</p>
<p>语法为<code>\color{black}{text}</code>。black为颜色的名称，text为进行染色的文本。</p>
<p>$$<br>\begin{array}{|rc|}<br>\hline<br>\verb+\color{black}{text}+ &amp; \color{black}{text} \\<br>\verb+\color{gray}{text}+ &amp; \color{gray}{text} \\<br>\verb+\color{silver}{text}+ &amp; \color{silver}{text} \\<br>\verb+\color{white}{text}+ &amp; \color{white}{text} \\<br>\hline<br>\verb+\color{maroon}{text}+ &amp; \color{maroon}{text} \\<br>\verb+\color{red}{text}+ &amp; \color{red}{text} \\<br>\verb+\color{yellow}{text}+ &amp; \color{yellow}{text} \\<br>\verb+\color{lime}{text}+ &amp; \color{lime}{text} \\<br>\verb+\color{olive}{text}+ &amp; \color{olive}{text} \\<br>\verb+\color{green}{text}+ &amp; \color{green}{text} \\<br>\verb+\color{teal}{text}+ &amp; \color{teal}{text} \\<br>\verb+\color{aqua}{text}+ &amp; \color{aqua}{text} \\<br>\verb+\color{blue}{text}+ &amp; \color{blue}{text} \\<br>\verb+\color{navy}{text}+ &amp; \color{navy}{text} \\<br>\verb+\color{purple}{text}+ &amp; \color{purple}{text} \\<br>\verb+\color{fuchsia}{text}+ &amp; \color{magenta}{text} \\<br>\hline<br>\end{array}<br>$$</p>

$$
\begin{array}{|rrrrrrrr|}
\hline
\verb+#000+ & \color{#000}{text} & \verb+#005+ & \color{#005}{text} & \verb+#00A+ & \color{#00A}{text} & \verb+#00F+ & \color{#00F}{text}  \\
\verb+#500+ & \color{#500}{text} & \verb+#505+ & \color{#505}{text} & \verb+#50A+ & \color{#50A}{text} & \verb+#50F+ & \color{#50F}{text}  \\
\verb+#A00+ & \color{#A00}{text} & \verb+#A05+ & \color{#A05}{text} & \verb+#A0A+ & \color{#A0A}{text} & \verb+#A0F+ & \color{#A0F}{text}  \\
\verb+#F00+ & \color{#F00}{text} & \verb+#F05+ & \color{#F05}{text} & \verb+#F0A+ & \color{#F0A}{text} & \verb+#F0F+ & \color{#F0F}{text}  \\
\hline
\verb+#080+ & \color{#080}{text} & \verb+#085+ & \color{#085}{text} & \verb+#08A+ & \color{#08A}{text} & \verb+#08F+ & \color{#08F}{text}  \\
\verb+#580+ & \color{#580}{text} & \verb+#585+ & \color{#585}{text} & \verb+#58A+ & \color{#58A}{text} & \verb+#58F+ & \color{#58F}{text}  \\
\verb+#A80+ & \color{#A80}{text} & \verb+#A85+ & \color{#A85}{text} & \verb+#A8A+ & \color{#A8A}{text} & \verb+#A8F+ & \color{#A8F}{text}  \\
\verb+#F80+ & \color{#F80}{text} & \verb+#F85+ & \color{#F85}{text} & \verb+#F8A+ & \color{#F8A}{text} & \verb+#F8F+ & \color{#F8F}{text}  \\
\hline
\verb+#0F0+ & \color{#0F0}{text} & \verb+#0F5+ & \color{#0F5}{text} & \verb+#0FA+ & \color{#0FA}{text} & \verb+#0FF+ & \color{#0FF}{text}  \\
\verb+#5F0+ & \color{#5F0}{text} & \verb+#5F5+ & \color{#5F5}{text} & \verb+#5FA+ & \color{#5FA}{text} & \verb+#5FF+ & \color{#5FF}{text}  \\
\verb+#AF0+ & \color{#AF0}{text} & \verb+#AF5+ & \color{#AF5}{text} & \verb+#AFA+ & \color{#AFA}{text} & \verb+#AFF+ & \color{#AFF}{text}  \\
\verb+#FF0+ & \color{#FF0}{text} & \verb+#FF5+ & \color{#FF5}{text} & \verb+#FFA+ & \color{#FFA}{text} & \verb+#FFF+ & \color{#FFF}{text}  \\
\hline
\end{array}
$$

<p>MathJax的HTML颜色，详情请参考<a href="http://www.w3schools.com/html/html_colors.asp" target="_blank" rel="external">这里</a>。</p>
<h3 id="交叉线"><a href="#交叉线" class="headerlink" title="交叉线"></a>交叉线</h3><p>使用<code>\require{cancel}</code>开启实现对本文添加交叉线的效果。该语法可以用来展示删除，取消等效果。</p>
<p>如：<br>
$$
\require{cancel}\begin{array}{rl}
\verb|y+\cancel{x}| & y+\cancel{x}\\
\verb|\cancel{y+x}| & \cancel{y+x}\\
\verb|y+\bcancel{x}| & y+\bcancel{x}\\
\verb|y+\xcancel{x}| & y+\xcancel{x}\\
\verb|y+\cancelto{0}{x}| & y+\cancelto{0}{x}\\
\verb+\frac{1\cancel9}{\cancel95} = \frac15+& \frac{1\cancel9}{\cancel95} = \frac15 \\
\end{array}
$$
</p>
<p>还可以使用<code>\require{enclose}</code>：</p>

$$
\require{enclose}\begin{array}{rl}
\verb|\enclose{horizontalstrike}{x+y}| & \enclose{horizontalstrike}{x+y}\\
\verb|\enclose{verticalstrike}{\frac xy}| & \enclose{verticalstrike}{\frac xy}\\
\verb|\enclose{updiagonalstrike}{x+y}| & \enclose{updiagonalstrike}{x+y}\\
\verb|\enclose{downdiagonalstrike}{x+y}| & \enclose{downdiagonalstrike}{x+y}\\
\verb|\enclose{horizontalstrike,updiagonalstrike}{x+y}| & \enclose{horizontalstrike,updiagonalstrike}{x+y}\\
\end{array}
$$

<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>下面列出一些常见的文字修饰符：</p>
<p><code>\overline</code> $\overline A$</p>
<p><code>\underline</code> $\underline B$</p>
<p><code>\widetilde</code> $\widetilde C$</p>
<p><code>\widehat</code> $\widehat D$</p>
<p><code>\fbox</code> $\fbox {$E$}$</p>
<p><code>\underleftarrow</code> $\underleftarrow{F}$</p>
<p><code>\underrightarrow</code> $\underrightarrow{G}$</p>
<p><code>\underleftrightarrow</code> $\underleftrightarrow{H}$</p>
<p><code>\overbrace</code> $\overbrace{(n - 2) + \overbrace{(n - 1) + n + (n + 1)} + (n + 2)}$</p>
<p><code>\underbrace</code> $(n \underbrace{- 2) + (n \underbrace{- 1) + n + (n +} 1) + (n +} 2)$</p>
<p><code>\overbrace</code>和<code>\underbrace</code>，可以添加上标/下标的文本。如<code>\underbrace{a\cdot a\cdots a}_{b\text{ times}}</code>展示为：</p>
<p>$$\underbrace{a\cdot a\cdots a}_{b\text{ times}}$$</p>
<p>音阶修饰符：</p>
<p><code>\check</code> $\check{I}$</p>
<p><code>\acute</code> $\acute{J}$</p>
<p><code>\grave</code> $\grave{K}$</p>
<h3 id="标签与标记"><a href="#标签与标记" class="headerlink" title="标签与标记"></a>标签与标记</h3><p>一些长公式，可能需要进行一些标注，或者是注明序号。</p>
<p><code>a := x^2-y^3 \tag{*}\label{*}</code></p>
<p>$$a := x^2-y^3 \tag{*}\label{*}$$</p>
<p>方程式等号之上也可以添加一些本文标注：</p>
<p><code>a+y^3 \stackrel{\eqref{*}}= x^2</code></p>
<p>$$a+y^3 \stackrel{\eqref{*}}= x^2$$</p>
<p>不带括号也可以，使用<code>\ref{somelabel}</code>即可。</p>
<h3 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h3><p>使用<code>\newcommand</code>可以进行功能自定义。</p>
<p><code>\newcommand{\SES}[3]{ 0 \to #1 \to #2 \to #3 \to 0 }</code></p>
<p>定义过的命令<code>SES</code>就可以进行调用了：<code>\SES{A}{B}{C}</code></p>
<p>$$<br>\newcommand{\SES}[3]{ 0 \to #1 \to #2 \to #3 \to 0 }<br>\SES{A}{B}{C}<br>$$</p>
<h3 id="指定操作符"><a href="#指定操作符" class="headerlink" title="指定操作符"></a>指定操作符</h3><p>使用<code>\operatorname{…}</code>可以指定任意文本作为操作符进行展示。</p>
<p>如<code>\operatorname{arsinh}(x)</code>展示为$\operatorname{arsinh}(x)$。</p>
<p>如果写成<code>arsinh(x)</code>，会造成字体显示不对：$arsinh(x)$；写成<code>\arsinh(x)</code>则会报错。</p>
<h3 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h3><p>在极限符号<code>\lim</code>后再跟一个<code> \limits</code>可以添加极限的下标。</p>
<p><code>\lim \limits_{x \to 1} \frac{x^2-1}{x-1}</code></p>
<p>$\lim \limits_{x \to 1} \frac{x^2-1}{x-1}$</p>
<h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><p>使用<code>\bbox</code>可以对方程式进行高亮展示。</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">\bbox[yellow]</div><div class="line">&#123;</div><div class="line">e^x=\lim_&#123;n\to\infty&#125; \left( 1+\frac&#123;x&#125;&#123;n&#125; \right)^n</div><div class="line">\qquad (1)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将展示为：</p>

$$ \bbox[yellow]
{
e^x=\lim_{n\to\infty} \left( 1+\frac{x}{n} \right)^n
\qquad (1)
}
$$

<p>可以添加内边距：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$$ \bbox[yellow,5px]</div><div class="line">&#123;</div><div class="line">e^x=\lim_&#123;n\to\infty&#125; \left( 1+\frac&#123;x&#125;&#123;n&#125; \right)^n</div><div class="line">\qquad (1)</div><div class="line">&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>

$$ \bbox[yellow,5px]
{
e^x=\lim_{n\to\infty} \left( 1+\frac{x}{n} \right)^n
\qquad (1)
}
$$

<p>也可以指定边框：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$$ \bbox[#1695ea,5px,border:2px solid cyan]</div><div class="line">&#123;</div><div class="line">e^x=\lim_&#123;n\to\infty&#125; \left( 1+\frac&#123;x&#125;&#123;n&#125; \right)^n</div><div class="line">\qquad (2)</div><div class="line">&#125;</div><div class="line">$$</div></pre></td></tr></table></figure>

$$ \bbox[#1695ea,5px,border:2px solid cyan]
{
e^x=\lim_{n\to\infty} \left( 1+\frac{x}{n} \right)^n
\qquad (2)
}
$$

<hr>
<p>本文完。</p>
]]></content>
    
    <summary type="html">
    
      本文是对之前的文章《MathJax基础教程与快速参考》的扩充。
    
    </summary>
    
      <category term="开发" scheme="http://xovel.cn/categories/dev/"/>
    
      <category term="文档" scheme="http://xovel.cn/categories/dev/docs/"/>
    
    
      <category term="mathjax" scheme="http://xovel.cn/tags/mathjax/"/>
    
      <category term="教程" scheme="http://xovel.cn/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="参考" scheme="http://xovel.cn/tags/%E5%8F%82%E8%80%83/"/>
    
      <category term="进阶" scheme="http://xovel.cn/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>对象属性访问的两种方式</title>
    <link href="http://xovel.cn/article/object-property-accessor.html"/>
    <id>http://xovel.cn/article/object-property-accessor.html</id>
    <published>2016-10-28T03:24:05.000Z</published>
    <updated>2016-11-18T07:00:40.177Z</updated>
    
    <content type="html"><![CDATA[<p>在JS中，对象的访问方式通常有两种，本文将对其做一个简单的介绍。</p>
<a id="more"></a>
<p>这两种方式一种是带点号<code>.</code>的访问方式，另一种是以方括号<code>[...]</code>的方式进行属性访问。</p>
<pre><code>object.property
object[&quot;property&quot;]
</code></pre><p>这两种属性访问方式效果等同。</p>
<p>这两种不同的方式的差异性如下：</p>
<ol>
<li>点号<code>.</code>能访问对象的属性的名称必须是严格的JS识别符。这个识别符的具体要求跟变量名类似。</li><li>方括号<code>[]</code>可以访问包含标准属性在内的一切属性。</li></ol>
<p><del>可以简单粗暴的认为点号的访问方式是方括号访问方式的一种语法糖</del></p>
<p>数字的点号属性访问不能直接跟在后面，需要使用如下方式进行访问：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">77</span> .toExponential();</div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="number">77</span></div><div class="line">.toExponential();</div><div class="line"><span class="comment">// or</span></div><div class="line">(<span class="number">77</span>).toExponential();</div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="number">77.</span>.toExponential();</div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="number">77.0</span>.toExponential();</div><div class="line"><span class="comment">// because 77. === 77.0, no ambiguity :p</span></div></pre></td></tr></table></figure>
<p>方括号可以访问特殊的属性，如可以使用<code>arr[1]</code>可以访问到数组arr的第二个下标的值，但是不能使用<code>arr.1</code>这种方式。</p>
<p>一些非常规的属性诸如<code>1$</code>、<code>+66</code>、<code>.233</code>，需要使用方括号的形式去访问。<blockquote><p>阅读过<code>jQuery</code>源码的人，应该都见识过<code>Sizzle</code>的<code>Expr</code>对象，里面有类似的访问方式：<code>jQuery.expr[ &quot;:&quot; ] = jQuery.expr.pseudos;</code></p>
<footer><strong>链接</strong><cite><a href="https://github.com/jquery/jquery/blob/1.12-stable/src/selector-sizzle.js#L8" target="_blank" rel="external">github.com/jquery/jquery/blob/1.12-stable/src/selector-sizzle.js#L8</a></cite></footer></blockquote><br>参考资料：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors" target="_blank" rel="external">Property accessors - JavaScript | MDN</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JS中，对象的访问方式通常有两种，本文将对其做一个简单的介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://xovel.cn/categories/dev/"/>
    
    
      <category term="object" scheme="http://xovel.cn/tags/object/"/>
    
      <category term="property" scheme="http://xovel.cn/tags/property/"/>
    
      <category term="method" scheme="http://xovel.cn/tags/method/"/>
    
  </entry>
  
  <entry>
    <title>JS运算符优先级</title>
    <link href="http://xovel.cn/article/js-operator-precedence.html"/>
    <id>http://xovel.cn/article/js-operator-precedence.html</id>
    <published>2016-10-25T03:15:09.000Z</published>
    <updated>2017-03-08T14:52:43.600Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文采编自<a href="https://developer.mozilla.org" target="_blank" rel="external">MDN</a>：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external">Operator precedence</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external">运算符优先级</a></li></ul>
</blockquote>
<p>运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。</p>
<p>下面是一个简单的例子：</p>
<pre><code>3 + 4 * 5 // 计算结果为23
</code></pre><p>乘法运算符 (“*”)比起加法运算符(“+”)有着更高的优先级，所以它会被最先执行。</p>
<h3 id="结合性"><a href="#结合性" class="headerlink" title="结合性"></a>结合性</h3><p>结合性决定了拥有相同优先级的运算符的执行顺序。考虑下面这个表达式：</p>
<pre><code>a OP b OP c
</code></pre><p>左结合(从左到右计算)相当于把左边的子表达式加上小括号(a OP b) OP c，类似的，右关联(从右到左计算)相当于a OP (b OP c)。赋值运算符是右关联的,所以你可以这么写：</p>
<pre><code>a = b = 5;
</code></pre><p>结果 a 和 b 的值都会成为5。这是因为赋值运算符的返回结果就是赋值运算符右边的那个值，具体过程是：b被赋值为5，然后a也被赋值为 b=5 的返回值，也就是5。</p>
<h3 id="汇总表"><a href="#汇总表" class="headerlink" title="汇总表"></a>汇总表</h3><p>下面的表将所有运算符按照优先级的不同从高到低排列。</p>
<p><img src="http://ww4.sinaimg.cn/large/79be2309gw1f94hwlrlikj20j81i0t9t.jpg" alt="运算符优先级表"></p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算类型</th>
<th>关联性</th>
<th>运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td>20</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping" target="_blank" rel="external"><code>分组</code></a></td>
<td>n/a</td>
<td><code>( … )</code></td>
</tr>
<tr>
<td>19</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Dot_notation" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation." target="_blank" rel="external"><code>成员访问</code></a></td>
<td>从左至右</td>
<td><code>… . …</code></td>
</tr>
<tr>
<td>19</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Bracket_notation" title="Property accessors provide access to an object&#39;s properties by using the dot notation or the bracket notation." target="_blank" rel="external"><code>计算成员访问</code></a></td>
<td>从左至右</td>
<td><code>… [ … ]</code></td>
</tr>
<tr>
<td>19</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" title="The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function." target="_blank" rel="external"><code>new</code></a> (带参数)</td>
<td>n/a</td>
<td><code>new … ( … )</code></td>
</tr>
<tr>
<td>18</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions" target="_blank" rel="external">函数调用</a></td>
<td>从左至右</td>
<td><code>… ( &lt;var&gt;… &lt;/var&gt;)</code></td>
</tr>
<tr>
<td>18</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new" title="The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function." target="_blank" rel="external"><code>new</code></a> (无参数)</td>
<td>从右至左</td>
<td><code>new …</code></td>
</tr>
<tr>
<td>17</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment" title="Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (https://developer.mozilla.org/)." target="_blank" rel="external"><code>后置自增</code></a></td>
<td>n/a</td>
<td><code>… ++</code></td>
</tr>
<tr>
<td>17</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Decrement" title="Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (https://developer.mozilla.org/)." target="_blank" rel="external"><code>后置自减</code></a></td>
<td>n/a</td>
<td><code>… --</code></td>
</tr>
<tr>
<td>16</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_NOT" target="_blank" rel="external">逻辑非</a></td>
<td>从右至左</td>
<td><code>! …</code></td>
</tr>
<tr>
<td>16</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT" target="_blank" rel="external">按位取非</a></td>
<td>从右至左</td>
<td><code>~ …</code></td>
</tr>
<tr>
<td>16</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus" target="_blank" rel="external">一元加法</a></td>
<td>从右至左</td>
<td><code>+ …</code></td>
</tr>
<tr>
<td>16</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_negation" target="_blank" rel="external">一元减法</a></td>
<td>从右至左</td>
<td><code>- …</code></td>
</tr>
<tr>
<td>16</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment" target="_blank" rel="external">前置自增</a></td>
<td>从右至左</td>
<td><code>++ …</code></td>
</tr>
<tr>
<td>16</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Decrement" target="_blank" rel="external">前置自减</a></td>
<td>从右至左</td>
<td><code>-- …</code></td>
</tr>
<tr>
<td>16</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="external">typeof</a></td>
<td>从右至左</td>
<td><code>typeof …</code></td>
</tr>
<tr>
<td>16</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void" target="_blank" rel="external">void</a></td>
<td>从右至左</td>
<td><code>void …</code></td>
</tr>
<tr>
<td>16</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete" target="_blank" rel="external">delete</a></td>
<td>从右至左</td>
<td><code>delete …</code></td>
</tr>
<tr>
<td>15</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Exponentiation" target="_blank" rel="external">取幂</a></td>
<td>从右至左</td>
<td><code>… ** …</code></td>
</tr>
<tr>
<td>14</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication" target="_blank" rel="external">乘法</a></td>
<td>从左至右</td>
<td><code>… * …</code></td>
</tr>
<tr>
<td>14</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division" target="_blank" rel="external">除法</a></td>
<td>从左至右</td>
<td><code>… / …</code></td>
</tr>
<tr>
<td>14</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder" target="_blank" rel="external">取余</a></td>
<td>从左至右</td>
<td><code>… % …</code></td>
</tr>
<tr>
<td>13</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition" target="_blank" rel="external">加法</a></td>
<td>从左至右</td>
<td><code>… + …</code></td>
</tr>
<tr>
<td>13</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction" target="_blank" rel="external">减法</a></td>
<td>从左至右</td>
<td><code>… - …</code></td>
</tr>
<tr>
<td>12</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="external">按位左移</a></td>
<td>从左至右</td>
<td><code>… &lt;&lt; …</code></td>
</tr>
<tr>
<td>12</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="external">按位右移</a></td>
<td>从左至右</td>
<td><code>… &gt;&gt; …</code></td>
</tr>
<tr>
<td>12</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="external">无符号右移</a></td>
<td>从左至右</td>
<td><code>… &gt;&gt;&gt; …</code></td>
</tr>
<tr>
<td>11</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_operator" target="_blank" rel="external">小于</a></td>
<td>从左至右</td>
<td><code>… &lt; …</code></td>
</tr>
<tr>
<td>11</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than__or_equal_operator" target="_blank" rel="external">小于等于</a></td>
<td>从左至右</td>
<td><code>… &lt;= …</code></td>
</tr>
<tr>
<td>11</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_operator" target="_blank" rel="external">大于</a></td>
<td>从左至右</td>
<td><code>… &gt; …</code></td>
</tr>
<tr>
<td>11</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_or_equal_operator" target="_blank" rel="external">大于等于</a></td>
<td>从左至右</td>
<td><code>… &gt;= …</code></td>
</tr>
<tr>
<td>11</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="external">in</a></td>
<td>从左至右</td>
<td><code>… in …</code></td>
</tr>
<tr>
<td>11</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="external">instanceof</a></td>
<td>从左至右</td>
<td><code>… instanceof …</code></td>
</tr>
<tr>
<td>10</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality" target="_blank" rel="external">等号</a></td>
<td>从左至右</td>
<td><code>… == …</code></td>
</tr>
<tr>
<td>10</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Inequality" target="_blank" rel="external">不等号</a></td>
<td>从左至右</td>
<td><code>… != …</code></td>
</tr>
<tr>
<td>10</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity" target="_blank" rel="external">全等</a></td>
<td>从左至右</td>
<td><code>… === …</code></td>
</tr>
<tr>
<td>10</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Nonidentity" target="_blank" rel="external">非全等</a></td>
<td>从左至右</td>
<td><code>… !== …</code></td>
</tr>
<tr>
<td>9</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND" target="_blank" rel="external">按位与</a></td>
<td>从左至右</td>
<td><code>… &amp; …</code></td>
</tr>
<tr>
<td>8</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR" target="_blank" rel="external">按位异或</a></td>
<td>从左至右</td>
<td><code>… ^ …</code></td>
</tr>
<tr>
<td>7</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR" target="_blank" rel="external">按位与</a></td>
<td>从左至右</td>
<td><code>… | …</code></td>
</tr>
<tr>
<td>6</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_AND" target="_blank" rel="external">逻辑与</a></td>
<td>从左至右</td>
<td><code>… &amp;&amp; …</code></td>
</tr>
<tr>
<td>5</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR" target="_blank" rel="external">逻辑或</a></td>
<td>从左至右</td>
<td><code>… || …</code></td>
</tr>
<tr>
<td>4</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="external">条件判断</a></td>
<td>从右至左</td>
<td><code>… ? … : …</code></td>
</tr>
<tr>
<td>3</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators" target="_blank" rel="external">赋值运算</a></td>
<td>从右至左</td>
<td><code>… = …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… += …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… -= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… **= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… *= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… /= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… %= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… &lt;&lt;= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… &gt;&gt;= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… &gt;&gt;&gt;= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… &amp;= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td><code>… ^= …</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td>… |= … </td>
</tr>
<tr>
<td>2</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield" target="_blank" rel="external">yield</a></td>
<td>从右至左</td>
<td><code>yield …</code></td>
</tr>
<tr>
<td>2</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*" target="_blank" rel="external">yield*</a></td>
<td>从右至左</td>
<td><code>yield* …</code></td>
</tr>
<tr>
<td>1</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="external">Spread</a></td>
<td>n/a</td>
<td><code>...</code> …</td>
</tr>
<tr>
<td>0</td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator" target="_blank" rel="external">逗号运算符</a></td>
<td>从左至右</td>
<td><code>… , …</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>表格由word制作，导出为图片。</p>
</blockquote>
<ul>
<li>取幂运算符<code>**</code>为<a href="http://www.ecma-international.org/ecma-262/7.0/index.html#sec-exp-operator" target="_blank" rel="external">ES7语法</a>。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Browser_compatibility" target="_blank" rel="external">浏览器兼容性</a>、<a href="http://kangax.github.io/compat-table/es2016plus/" target="_blank" rel="external">exponentiation (**) operator</a></li><li>取幂赋值<code>**=</code>同上。</li><li>计算成员访问，指的是使用<code>[...]</code>的方式访问对象的成员属性。</li><li>三目运算符为条件判断语句。</li></ul>
<hr>
<p><del>markdown解析表格时出现错误，竖线符识别问题，下次修复。</del></p>
<blockquote>
<p>2016年10月28日，修复markdown表格中单元格带竖线<code>|</code>的问题。</p>
<p>详情见：<a href="https://github.com/xovel/xovel.github.io/issues/10" target="_blank" rel="external">https://github.com/xovel/xovel.github.io/issues/10</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。
    
    </summary>
    
      <category term="WEB" scheme="http://xovel.cn/categories/web/"/>
    
      <category term="JS" scheme="http://xovel.cn/categories/web/js/"/>
    
    
      <category term="js" scheme="http://xovel.cn/tags/js/"/>
    
      <category term="operator" scheme="http://xovel.cn/tags/operator/"/>
    
      <category term="优先级" scheme="http://xovel.cn/tags/%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    
      <category term="基础知识" scheme="http://xovel.cn/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
